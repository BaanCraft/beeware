# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-15 18:36+0000\n"
"PO-Revision-Date: 2024-04-11 17:01+0000\n"
"Last-Translator: sus <jeffpeng2012@gmail.com>\n"
"Language: zh_TW\n"
"Language-Team: Chinese (Traditional) <https://hosted.weblate.org/projects/beeware/tutorial/tutorial-2/zh_Hant/>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../tutorial/tutorial-2.rst:3 a701b63013574a16be5b95d3a589e3bc
#, fuzzy
msgid "Tutorial 2 - Making it interesting"
msgstr "教學 2 - 讓它變得有趣"

#: ../../tutorial/tutorial-2.rst:5 4b253cc19f2044a4ac2c20b140a20fcd
#, fuzzy
msgid "In :doc:`Tutorial 1 <tutorial-1>`, we generated a stub project that was able to run, but we didn't write any code ourselves. Let's take a look at what was generated for us."
msgstr "在 :doc:`教程 1 中<tutorial-1>`，我們產生了一個能夠運行的存根項目，但我們自己沒有寫任何程式碼。讓我們看看為我們產生了什麼。"

#: ../../tutorial/tutorial-2.rst:10 6d39c0fc0a154bf6b67c73fad77a6a95
#, fuzzy
msgid "What was generated"
msgstr "生成了什麼"

#: ../../tutorial/tutorial-2.rst:12 aea23120db374d6fa86264e6105110dd
#, fuzzy
msgid "In the ``src/helloworld`` directory, you should see 3 files: ``__init__.py``, ``__main__.py`` and ``app.py``."
msgstr "在 src/helloworld 目錄中，您應該會看到 3 個檔案：__init__.py、__main__.py 和 app.py。"

#: ../../tutorial/tutorial-2.rst:15 a1072683b5e64702bbac547fef704c12
#, fuzzy
msgid "``__init__.py`` marks the ``helloworld`` directory as an importable Python module. It is an empty file; the very fact it exists tells the Python interpreter that the ``helloworld`` directory defines a module."
msgstr "``__init__.py`` 將``helloworld`` 目錄標記為可匯入的Python 模組。這是一個空文件；它的存在告訴 Python 解釋器``helloworld``目錄定義了一個模組。"

#: ../../tutorial/tutorial-2.rst:19 19cf411d34924c4fa0a8c743c1d6dffb
#, fuzzy
msgid "``__main__.py`` marks the ``helloworld`` module as a special kind of module - an executable module. If you try to run the ``helloworld`` module using ``python -m helloworld``, the ``__main__.py`` file is where Python will start executing. The contents of ``__main__.py`` is relatively simple::"
msgstr "``__main__.py`` 將``helloworld`` 模組標記為一種特殊類型的模組 - 可執行模組。如果您嘗試使用``python -m helloworld``來執行``helloworld``模組，則``__main__.py``檔案是Python將開始執行的位置。 ``__main__.py`` 的內容比較簡單："

#: ../../tutorial/tutorial-2.rst:29 df1a47b5bc1a483e9538b8e2a37bd074
#, fuzzy
msgid "That is - it imports the ``main`` method from the ``helloworld`` app; and if it's being executed as an entry point, calls the main() method, and starts the application's main loop. The main loop is the way a GUI application listens for user input (like mouse clicks and keyboard presses)."
msgstr "也就是說 - 它從``helloworld``應用程式導入``main``方法；如果它是作為入口點執行，則呼叫 main() 方法，並啟動應用程式的主循環。主循環是 GUI 應用程式偵聽使用者輸入（如滑鼠點擊和鍵盤按下）的方式。"

#: ../../tutorial/tutorial-2.rst:34 9a1daba18cdf48f1b96eb9bc7138812a
#, fuzzy
msgid "The more interesting file is ``app.py`` - this contains the logic that creates our application window::"
msgstr "更有趣的檔案是``app.py``——它包含創建我們的應用程式視窗的邏輯::"

#: ../../tutorial/tutorial-2.rst:52 29ef878ea1ab46f489e7775585d57769
#, fuzzy
msgid "Let's go through this line by line::"
msgstr "讓我們逐行瀏覽一下："

#: ../../tutorial/tutorial-2.rst:58 60475d747ac34b1889eb794af6de431d
#, fuzzy
msgid "First, we import the ``toga`` widget toolkit, as well as some style-related utility classes and constants. Our code doesn't use these yet - but we'll make use of them shortly."
msgstr "首先，我們匯入``toga``小工具工具包，以及一些與樣式相關的實用程式類別和常數。我們的程式碼尚未使用它們 - 但我們很快就會使用它們。"

#: ../../tutorial/tutorial-2.rst:62 c9d16a31e12b4503a2fb420b221d36e3
#, fuzzy
msgid "Then, we define a class::"
msgstr "然後，我們定義一個類別：："

#: ../../tutorial/tutorial-2.rst:66 2441cd76e2224f21a06462fc7250c7a4
#, fuzzy
msgid "Each Toga application has a single ``toga.App`` instance, representing the running entity that is the application. The app may end up managing multiple windows; but for simple applications, there will be a single main window."
msgstr "每個 Toga 應用程式都有一個``toga.App``實例，代表應用程式的運作實體。該應用程式最終可能會管理多個視窗；但對於簡單的應用程序，將有一個主視窗。"

#: ../../tutorial/tutorial-2.rst:70 0426c554132c4c778387ae5ab3bbb61c
#, fuzzy
msgid "Next, we define a ``startup()`` method::"
msgstr "接下來，我們定義一個``startup()``方法："

#: ../../tutorial/tutorial-2.rst:75 623192a54d694072918af3f2ac64e8d8
#, fuzzy
msgid "The first thing the startup method does is to define a main box. Toga's layout scheme behaves similar to HTML. You build an application by constructing a collection of boxes, each of which contains other boxes, or actual widgets. You then apply styles to these boxes to define how they will consume the available window space."
msgstr "啟動方法所做的第一件事是定義一個主框。 Toga 的佈局方案的行為與 HTML 類似。您可以透過建立一組框來建立應用程序，每個框都包含其他框或實際的小部件。然後，您可以將樣式套用到這些方塊來定義它們將如何使用可用的視窗空間。"

#: ../../tutorial/tutorial-2.rst:81 9dfddb03335b4c3b889d3e4679baa426
#, fuzzy
msgid "In this application, we define a single box, but we don't put anything into it."
msgstr "在此應用程式中，我們定義了一個框，但沒有在其中放入任何內容。"

#: ../../tutorial/tutorial-2.rst:83 bdeb45d4a39646fab77d88bab58fd6e7
#, fuzzy
msgid "Next, we define a window into which we can put this empty box::"
msgstr "接下來，我們定義一個窗口，可以將這個空框放入其中："

#: ../../tutorial/tutorial-2.rst:87 23538db183a54ca3975aaec363a38c0a
#, fuzzy
msgid "This creates an instance of a ``toga.MainWindow``, which will have a title matching the application's name. A Main Window is a special kind of window in Toga - it's a window that is closely bound to the life cycle of the app. When the Main Window is closed, the application exits. The Main Window is also the window that has the application's menu (if you're on a platform like Windows where menu bars are part of the window)."
msgstr "這將建立一個``toga.MainWindow``實例，它將具有與應用程式名稱相符的標題。主視窗是 Toga 中的一種特殊視窗 - 它是與應用程式的生命週期密切相關的視窗。當主視窗關閉時，應用程式退出。主視窗也是具有應用程式選單的視窗（如果您使用的是 Windows 等平台，其中功能表列是視窗的一部分）"

#: ../../tutorial/tutorial-2.rst:94 68ed6ad9cb5f43349bfc3cf5f95a420c
#, fuzzy
msgid "We then add our empty box as the content of the main window, and instruct the application to show our window::"
msgstr "然後，我們添加空框作為主視窗的內容，並指示應用程式顯示我們的視窗::"

#: ../../tutorial/tutorial-2.rst:100 c39bfdb374ce4f31931776ffbb908c53
#, fuzzy
msgid "Last of all, we define a ``main()`` method. This is what creates the instance of our application::"
msgstr "最後，我們定義一個``main()``方法。這就是創建我們的應用程式實例的原因："

#: ../../tutorial/tutorial-2.rst:106 519224c3029a4f109f0cba927a462e7d
#, fuzzy
msgid "This ``main()`` method is the one that is imported and invoked by ``__main__.py``. It creates and returns an instance of our ``HelloWorld`` application."
msgstr "這個``main()``方法是由``__main__.py``導入和呼叫的方法。它創建並傳回我們的``HelloWorld``應用程式的實例。"

#: ../../tutorial/tutorial-2.rst:110 60880b199b7e4a4394c23709e20f5eb8
#, fuzzy
msgid "That's the simplest possible Toga application. Let's put some of our own content into the application, and make the app do something interesting."
msgstr "這是最簡單的 Toga 應用程式。讓我們將一些我們自己的內容放入應用程式中，並使應用程式做一些有趣的事情。"

#: ../../tutorial/tutorial-2.rst:114 850e16ccda86444cb0b8f49c95f99147
#, fuzzy
msgid "Adding some content of our own"
msgstr "添加一些我們自己的內容"

#: ../../tutorial/tutorial-2.rst:116 b9cdb9e8b72d4cd79b19bc5e57c0a1c3
#, fuzzy
msgid "Modify your ``HelloWorld`` class inside ``src/helloworld/app.py`` so that it looks like this::"
msgstr "修改``src/helloworld/app.py``中的``HelloWorld``類，使其看起來像這樣::"

#: ../../tutorial/tutorial-2.rst:151 5bf23adbda2b476c9cf3d5571122e398
#, fuzzy
msgid "Don't remove the imports at the top of the file , or the ``main()`` at the bottom. You only need to update the ``HelloWorld`` class."
msgstr "不要刪除文件頂部的導入或底部的``main()``。您只需要更新``HelloWorld``類別。"

#: ../../tutorial/tutorial-2.rst:154 ffaf1a67f81d463083d03c236f59ca9a
#, fuzzy
msgid "Let's look in detail at what has changed."
msgstr "讓我們詳細看看發生了什麼變化。"

#: ../../tutorial/tutorial-2.rst:156 975a9fd4aa0245ff9e1e7a5f723bed5c
#, fuzzy
msgid "We're still creating a main box; however, we are now applying a style::"
msgstr "我們仍在創建一個主盒子；然而，我們現在正在應用一種風格::"

#: ../../tutorial/tutorial-2.rst:160 eba5d958d5f747b69f827c3fbfbdf2a6
#, fuzzy
msgid "Toga's built-in layout system is called \"Pack\". It behaves a lot like CSS. You define objects in a hierarchy - in HTML, the objects are ``<div>``, ``<span>``, and other DOM elements; in Toga, they're widgets and boxes. You can then assign styles to the individual elements. In this case, we're indicating that this is a ``COLUMN`` box - that is, it is a box that will consume all the available width, and will expand its height as content is added, but it will try to be as short as possible."
msgstr "Toga 的內建佈局系統稱為``Pack``。它的行為很像 CSS。您可以在層次結構中定義物件 - 在 HTML 中，物件是``<div>``、`` <span>`` 和其他 DOM 元素；在 Toga 中，它們是小部件和盒子。然後，您可以為各個元素指定樣式。在這種情況下，我們表明這是一個``COLUMN``框 - 也就是說，它是一個將消耗所有可用寬度的框，並且會在添加內容時擴展其高度，但它會嘗試盡可能短。</span>"

#: ../../tutorial/tutorial-2.rst:167 217761640999473f991d1ffeffd68e3e
#, fuzzy
msgid "Next, we define a couple of widgets::"
msgstr "接下來，我們定義幾個小工具：："

#: ../../tutorial/tutorial-2.rst:175 200244195de04c3fae607bc4166f72b2
#, fuzzy
msgid "Here, we define a Label and a TextInput. Both widgets have styles associated with them; the label will have 5px of padding on its left and right, and no padding on the top and bottom. The TextInput is marked as being flexible - that is, it will absorb all available space in its layout axis."
msgstr "在這裡，我們定義了一個 Label 和一個 TextInput。這兩個小部件都有與之相關的樣式；標籤的左側和右側將有 5 個像素的內邊距，頂部和底部將沒有內邊距。 TextInput 被標記為靈活的 - 也就是說，它將吸收其佈局軸中的所有可用空間。"

#: ../../tutorial/tutorial-2.rst:180 317ff6038b1f4ad4a75ba81e6debe84e
#, fuzzy
msgid "The TextInput is assigned as an instance variable of the class. This gives us easy access to the widget instance - something that we'll use in a moment."
msgstr "TextInput 被指定為該類別的實例變數。這使我們可以輕鬆存取小部件實例 - 我們稍後將使用它。"

#: ../../tutorial/tutorial-2.rst:183 dac7360bb2ff499ebca4f480aa2c28ac
#, fuzzy
msgid "Next, we define a box to hold these two widgets::"
msgstr "接下來，我們定義一個盒子來容納這兩個小工具："

#: ../../tutorial/tutorial-2.rst:189 755bfe91d7d547a6bbb2cf674857e2ae
#, fuzzy
msgid "The ``name_box`` is a box just like the main box; however, this time, it's a ``ROW`` box. That means content will be added horizontally, and it will try to make its width as narrow as possible. The box also has some padding - 5px on all sides."
msgstr "``name_box`` 是一個像主盒子一樣的盒子；然而，這一次，它是一個``ROW``盒子。這意味著內容將水平添加，並且它將嘗試使其寬度盡可能窄。盒子還有一些內邊距 - 所有邊都是 5px。"

#: ../../tutorial/tutorial-2.rst:194 1143dfe7f5ed470ea397180ff35bcef3
#, fuzzy
msgid "Now we define a button::"
msgstr "現在我們定義一個按鈕::"

#: ../../tutorial/tutorial-2.rst:202 7a2b7e5eeecb490199a4a873594699d1
#, fuzzy
msgid "The button also has 5px of padding on all sides. We also define a *handler* - a method to invoke when the button is pressed."
msgstr "此按鈕的所有邊都有 5 像素的內邊距。我們也定義了一個*處理程序* - 按下按鈕時呼叫的方法。"

#: ../../tutorial/tutorial-2.rst:205 6f27e5f3393b44b09e74b65ebaa00210
#, fuzzy
msgid "Then, we add the name box and the button to the main box::"
msgstr "然後，我們將名稱框和按鈕新增到主框："

#: ../../tutorial/tutorial-2.rst:210 eaf2a6e58f0041f4941de4b181657f1b
#, fuzzy
msgid "This completes our layout; the rest of the startup method is as it was previously - defining a ``MainWindow``, and assigning the main box as the window's content::"
msgstr "這樣就完成了我們的佈局；啟動方法的其餘部分與之前一樣 - 定義一個 MainWindow，並將主框指定為視窗的內容::"

#: ../../tutorial/tutorial-2.rst:218 af59beaf3dab45cba594f801c351d476
#, fuzzy
msgid "The last thing we need to do is define the handler for the button. A handler can be any method, generator, or asynchronous coroutine; it accepts the widget that generated the event as an argument, and will be invoked whenever the button is pressed::"
msgstr "我們需要做的最後一件事是定義按鈕的處理程序。處理程序可以是任何方法、生成器或非同步協程；它接受生成事件的小部件作為參數，並且每當按下按鈕時就會調用::"

#: ../../tutorial/tutorial-2.rst:226 2b6ebde739464af690e96f12f336e1bc
#, fuzzy
msgid "The body of the method is a simple print statement - however, it will interrogate the current value of the name input, and use that content as the text that is printed."
msgstr "該方法的主體是一個簡單的列印語句 - 但是，它將詢問名稱輸入的當前值，並使用該內容作為列印的文字。"

#: ../../tutorial/tutorial-2.rst:230 9f4668cf8af94a2aa5400dca2ab6576a
#, fuzzy
msgid "Now that we've made these changes we can see what they look like by starting the application again. As before, we'll use developer mode:"
msgstr "現在我們已經進行了這些更改，我們可以透過再次啟動應用程式來查看它們的外觀。和以前一樣，我們將使用開發者模式："

#: ../../tutorial/tutorial-2.rst:235 ../../tutorial/tutorial-2.rst:272
#: b7e12cce275d4208a3088f99a91ad601 f15e3f4829c6492fb8e6e54e0e1aa23c
msgid "macOS"
msgstr "macOS"

#: ../../tutorial/tutorial-2.rst:244 ../../tutorial/tutorial-2.rst:278
#: 1bb650e8d5f34808882a31c115f02e4c 78f012316beb4348b56bbe161b6ee0be
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-2.rst:253 ../../tutorial/tutorial-2.rst:284
#: 51c2733479704de1a0f0f18a1e4cc9e3 6a5921bb0e52467ca7eb43aedb70faa1
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-2.rst:262 ac806f40fdd04dc5838f2ac40a655df1
#, fuzzy
msgid "You'll notice that this time, it *doesn't* install dependencies. Briefcase can detect that the application has been run before, and to save time, will only run the application. If you add new dependencies to your app, you can make sure that they're installed by passing in a ``-r`` option when you run ``briefcase dev``."
msgstr "您會注意到，這一次，它``不``安裝依賴項。公文包可以檢測到該應用程式之前已經運行過，為了節省時間，只會運行該應用程式。如果您為應用程式新增的依賴項，則可以在執行``briefcase dev``時傳入``-r``選項來確保它們已安裝。"

#: ../../tutorial/tutorial-2.rst:268 794a1aab5f554624aae3b507b0b7156c
msgid "This should open a GUI window:"
msgstr "這應該打開一個 GUI 視窗："

#: ../../tutorial/tutorial-2.rst:274 ea8b40b3201e4ee8b455f3460ebb480c
#, fuzzy
msgid "Hello World Tutorial 2 window, on macOS"
msgstr "Hello World 教學 2 窗口，在 macOS 上"

#: ../../tutorial/tutorial-2.rst:280 a8901687dbf44e50aa435106f7152924
#, fuzzy
msgid "Hello World Tutorial 2 window, on Linux"
msgstr "Linux 上的 Hello World 教學 2 窗口"

#: ../../tutorial/tutorial-2.rst:286 9b11ae2cb87f4a7e87812d91cc2ca4aa
#, fuzzy
msgid "Hello World Tutorial 2 window, on Windows"
msgstr "Hello World 教學 2 窗口，在 Windows 上"

#: ../../tutorial/tutorial-2.rst:290 d7e11ddd06dc4c5fa1101573f6ea2ff6
#, fuzzy
msgid "If you enter a name in the text box, and press the GUI button, you should see output appear in the console where you started the application."
msgstr "如果您在文字方塊中輸入名稱，然後按 GUI 按鈕，您應該會看到啟動應用程式的控制台中出現輸出。"

#: ../../tutorial/tutorial-2.rst:294 6b65aa5ef9ea421b80e85f0a66b0bd75
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-2.rst:296 34c8022a9a6b466182768f9fb630c318
#, fuzzy
msgid "We've now got an application that does something a little more interesting. But it only runs on our own computer. Let's package this application for distribution. In :doc:`Tutorial 3 <tutorial-3>`, we'll wrap our application up as a standalone installer that we could send to a friend, a customer, or upload to an App Store."
msgstr "我們現在有了一個可以做一些更有趣的事情的應用程式。但它只能在我們自己的計算機上運行。讓我們打包這個應用程式以進行分發。在 :doc:`教程 3 中<tutorial-3>`，我們將把我們的應用程式打包為一個獨立的安裝程序，我們可以將其發送給朋友、客戶，或上傳到應用程式商店。"

