# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-13 17:07+0000\n"
"PO-Revision-Date: 2024-04-10 21:02+0000\n"
"Last-Translator: sus <jeffpeng2012@gmail.com>\n"
"Language: zh_TW\n"
"Language-Team: Chinese (Traditional) <https://hosted.weblate.org/projects/beeware/tutorial/tutorial-7/zh_Hant/>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorial/tutorial-7.rst:3 4590ac5a42f3489caa0e700203ecd4b7
#, fuzzy
msgid "Tutorial 7 - Get this (third)-party started"
msgstr "教學 7 - 啟動此（第三方）"

#: ../../tutorial/tutorial-7.rst:5 a700331025fd42be9d0d7d8222261bbe
#, fuzzy
msgid "So far, the app we've built has only used our own code, plus the code provided by BeeWare. However, in a real-world app, you'll likely want to use a third-party library, downloaded from the Python Package Index (PyPI)."
msgstr "到目前為止，我們建立的應用程式只使用了我們自己的程式碼，加上 BeeWare 提供的程式碼。但是，在現實應用程式中，您可能需要使用從 Python Package Index (PyPI) 下載的第三方程式庫。"

#: ../../tutorial/tutorial-7.rst:9 462a653c42ee4f7cb627b83af0c564d3
#, fuzzy
msgid "Let's modify our app to include a third-party library."
msgstr "讓我們修改我們的應用程式以包含第三方程式庫。"

#: ../../tutorial/tutorial-7.rst:12 2d2437448efb48109e28be2a9c336698
msgid "Adding a package"
msgstr ""

#: ../../tutorial/tutorial-7.rst:14 e442501783c248f1806f0637ca250707
msgid "Let's modify our application to say a little bit more than just \"Hi, there!\"."
msgstr ""

#: ../../tutorial/tutorial-7.rst:16 dba87f1f61ae4975977901eb95b66a04
msgid "To generate some more interesting text for the dialog, we're going to use a library called `Faker <https://faker.readthedocs.io/en/stable/>`__ . Faker is a Python package that generates fake content, including names and text blocks. The names and words in the text block are generated from an arbitrary list of words provided by Faker. We're going to use Faker to construct a fake message, as if someone is responding to the user."
msgstr ""

#: ../../tutorial/tutorial-7.rst:23 af26f0f47a424cb1a16ad82e0d57fa1d
#, fuzzy
msgid "We start by adding ``faker`` to our app. Add an import to the top of the ``app.py`` to import ``faker``::"
msgstr "讓我們為我們的應用程式新增一個``httpx`` API 呼叫。將導入新增至``app.py``頂部以導入``httpx``::"

#: ../../tutorial/tutorial-7.rst:28 8db0aef5903f418eb07fb0961e0aaa67
#, fuzzy
msgid "Then modify the ``say_hello()`` callback so it looks like this::"
msgstr "然後修改``say_hello()``回調，使其看起來像這樣::"

#: ../../tutorial/tutorial-7.rst:39 2cd8f96a33fa4fda9165147da3cd7b5a
#, fuzzy
msgid "Lets run our updated app in Briefcase developer mode to check that our change has worked."
msgstr "讓我們在公文包開發者模式下運行更新後的應用程序，以檢查我們的更改是否有效。"

#: ../../tutorial/tutorial-7.rst:44 ../../tutorial/tutorial-7.rst:120
#: ../../tutorial/tutorial-7.rst:182 ../../tutorial/tutorial-7.rst:510
#: 18fd1e67166545f6a6691a9430001ad9 353ce75d4c2442b6bdc1f8050e81b574
#: 66a09979836e47149900aa0adbc10f8c 683b3f40cdc44c048b79edb76f0f5890
msgid "macOS"
msgstr "macOS"

#: ../../tutorial/tutorial-7.rst:64 ../../tutorial/tutorial-7.rst:134
#: ../../tutorial/tutorial-7.rst:220 ../../tutorial/tutorial-7.rst:531
#: 934a3353a1c24d7e9de4a495a90eca65 936f43ab42044555bf44ae7cbac9c800
#: a370257ddac64a9fa5930049fdbe04de c8e3e4c8bc034550a3a4938a5f618010
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-7.rst:84 ../../tutorial/tutorial-7.rst:148
#: ../../tutorial/tutorial-7.rst:273 ../../tutorial/tutorial-7.rst:558
#: 81b487e8c5814680b93630681b20277c 8ccc16e3117f4bbe9846723a01ce246c
#: bb529f88cd47488791b81516fd3c32cc e58e12fbf89745ddad0ead4048e9538d
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-7.rst:104 ../../tutorial/tutorial-7.rst:162
#: ../../tutorial/tutorial-7.rst:311 ../../tutorial/tutorial-7.rst:579
#: 0a45e05c16634ba79b267fe51977c705 6bf8d71c903341cc9f9e138650552d34
#: 9e360c8a413d421895f6d7c8daf53df6 fc4f320c520d4d47a3c558d0ae962eba
msgid "Android"
msgstr ""

#: ../../tutorial/tutorial-7.rst:106 ../../tutorial/tutorial-7.rst:164
#: f41ada425fc448e6b89fc6e344ca8f8d f43b2b7d8554472ca452427ad2cb8f4e
msgid "You can't run an Android app in developer mode - use the instructions for your chosen desktop platform."
msgstr ""

#: ../../tutorial/tutorial-7.rst:109 ../../tutorial/tutorial-7.rst:167
#: ../../tutorial/tutorial-7.rst:384 ../../tutorial/tutorial-7.rst:596
#: 38dfc709b6af44d6bf12fba8ad51e2dd 9dc24e920b6d46bf8fe9d98903b4827d
#: a4e7e26237aa47318e4245d6e0bc9fa2 b21bb54f5c754b418f38e04dcb930895
#, fuzzy
msgid "iOS"
msgstr "Windows"

#: ../../tutorial/tutorial-7.rst:111 ../../tutorial/tutorial-7.rst:169
#: 439614ad95d148678ec1eaabab33e671 45635f3a7be34ec581ca539763538745
msgid "You can't run an iOS app in developer mode - use the instructions for your chosen desktop platform."
msgstr ""

#: ../../tutorial/tutorial-7.rst:114 d030aea1d06d440da1e2c931670f1e2a
#, fuzzy
msgid "What happened? We've added ``faker`` to our *code*, but we haven't added it to our development virtual environment. We can fix this by installing ``faker`` with ``pip``, and then re-running ``briefcase dev``:"
msgstr "發生了什麼事？我們已將``httpx``新增至我們的*程式碼*中，但我們尚未將其新增至我們的開發虛擬環境。我們可以透過用``pip``安裝``httpx``來解決這個問題，然後重新執行``briefcase dev``："

#: ../../tutorial/tutorial-7.rst:127 ../../tutorial/tutorial-7.rst:141
#: ../../tutorial/tutorial-7.rst:155 5cd4f5c905e64aa1a628aa2aac4d5dba
#: a1ad5b6d4b5a463a8ddea0bc06e25340 f0766cae89944b5fa7bd9cc87b28433e
#, fuzzy
msgid "When you enter a name and press the button, you should see a dialog that looks something like:"
msgstr "當您輸入名稱並按下按鈕時，您應該會看到一個類似以下內容的對話框："

#: ../../tutorial/tutorial-7.rst:130 294ad803b8de4f90b998f727c2ecb1d3
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on macOS"
msgstr "Hello World 教學 7 對話框，在 macOS 上"

#: ../../tutorial/tutorial-7.rst:144 4a7c865f0f444b20999b18b4dc9c71fc
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on Linux"
msgstr "Linux 上的 Hello World 教學 7 對話框"

#: ../../tutorial/tutorial-7.rst:158 143ab754d8c84686adabe48217ddb3e7
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on Windows"
msgstr "Hello World 教學 7 對話框，在 Windows 上"

#: ../../tutorial/tutorial-7.rst:172 6a617eb493d449498c61e8207b788bed
#, fuzzy
msgid "We've now got a working app, using a third party library, running in development mode!"
msgstr "我們現在有了一個可以使用的應用程序，使用第三方庫，在開發模式下運行！"

#: ../../tutorial/tutorial-7.rst:175 45abd4fa5eb2476ab627c5cd1e3fc53f
#, fuzzy
msgid "Running the updated app"
msgstr "運行更新的應用程式"

#: ../../tutorial/tutorial-7.rst:177 4314f084a3be478f8395c21bb4607389
#, fuzzy
msgid "Let's get this updated application code packaged as a standalone app. Since we've made code changes, we need to follow the same steps as in :doc:`Tutorial 4 <tutorial-4>`:"
msgstr "讓我們將此更新的應用程式程式碼打包為獨立應用程式。由於我們已經更改了程式碼，因此我們需要遵循 :doc:`教程 4 <tutorial-4>` 中的相同步驟："

#: ../../tutorial/tutorial-7.rst:184 ../../tutorial/tutorial-7.rst:222
#: ../../tutorial/tutorial-7.rst:275 ../../tutorial/tutorial-7.rst:313
#: ../../tutorial/tutorial-7.rst:386 4b93c9663a0f4aefb6dc929a4d9fe382
#: 7f53804531d9443aa2e99cf2881c5777 ae40d690a1d84630a4a123df7d995615
#: d4de3d01aaca4d7e85e03dd1c52062b2 e159a30ae22c4c559f070411a7f1ad45
#, fuzzy
msgid "Update the code in the packaged app:"
msgstr "更新打包應用程式中的程式碼："

#: ../../tutorial/tutorial-7.rst:195 ../../tutorial/tutorial-7.rst:233
#: ../../tutorial/tutorial-7.rst:286 ../../tutorial/tutorial-7.rst:324
#: ../../tutorial/tutorial-7.rst:397 19e8ff1d61ca4b0ea1a5dbc419cb1634
#: 34615439d84f4881b812953c9e755e87 86f9be0c3bf34027ac0074b71be3b772
#: eb9060ee3e594762b42f1780e84e8544 fbab795fe7a84c47bbea0b8aaef2b279
#, fuzzy
msgid "Rebuild the app:"
msgstr "重建應用程式："

#: ../../tutorial/tutorial-7.rst:204 ../../tutorial/tutorial-7.rst:247
#: ../../tutorial/tutorial-7.rst:295 792c16457d4d40df82a079548325a2b5
#: ecbc7a5b081a4f76a6396bf55fbe0291 edce7363527449df828375693e8e43cc
#, fuzzy
msgid "And finally, run the app:"
msgstr "最後，運行應用程式："

#: ../../tutorial/tutorial-7.rst:213 ../../tutorial/tutorial-7.rst:304
#: 4464eb67d5f74a2483b1f6e1fca90169 e400ed97238843a99bfe3dc59d8b6041
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console, plus a crash dialog:"
msgstr "但是，當應用程式運行時，您會在控制台中看到錯誤，以及崩潰對話框："

#: ../../tutorial/tutorial-7.rst:216 8c84b05786fd43de945b34fd41033c67
#, fuzzy
msgid "Hello World Tutorial 7 app crash, on macOS"
msgstr "Hello World 教學 7 應用程式崩潰，在 macOS 上"

#: ../../tutorial/tutorial-7.rst:256 ../../tutorial/tutorial-7.rst:343
#: 8af9dd6bfa174ce0ba5d22b06802cc5a ad1eeef902ee4e96a6dff63ecfb3aca3
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console:"
msgstr "但是，當應用程式運行時，您會在控制台中看到錯誤："

#: ../../tutorial/tutorial-7.rst:307 7323dd139bd241639db0f3acd8548777
#, fuzzy
msgid "Hello World Tutorial 7 app crash, on Windows"
msgstr "Hello World 教學 7 應用程式崩潰，在 Windows 上"

#: ../../tutorial/tutorial-7.rst:334 ../../tutorial/tutorial-7.rst:407
#: 3b44fa97bfdf4715bfa7c34fe3b188d4 63861b9e933e435ebb1f4a6dbf8e1c8e
msgid "And finally, run the app (selecting a simulator when prompted):"
msgstr ""

#: ../../tutorial/tutorial-7.rst:417 27cac7706e77470db7db61942c7960d3
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console"
msgstr "但是，當應用程式運行時，您會在控制台中看到錯誤："

#: ../../tutorial/tutorial-7.rst:430 6e056ef724da4995a880450ccda0aae8
#, fuzzy
msgid "Once again, the app has failed to start because ``faker`` has not been installed - but why? Haven't we already installed ``faker``?"
msgstr "再一次，應用程式無法啟動，因為``httpx``已安裝 - 但為什麼呢？我們不是已經安裝了``httpx``了嗎？"

#: ../../tutorial/tutorial-7.rst:433 bc51cfd16c56453d959d800971ac2faa
#, fuzzy
msgid "We have - but only in the development environment. Your development environment is entirely local to your machine - and is only enabled when you explicitly activate it. Although Briefcase has a development mode, the main reason you'd use Briefcase is to package up your code so you can give it to someone else."
msgstr "我們有 - 但僅限於開發環境。您的開發環境完全位於您的電腦本機 - 並且僅在您明確啟動它時才啟用。儘管Briefcase 有開發模式，但您使用Briefcase 的主要原因是打包您的程式碼，以便提供給其他人。"

#: ../../tutorial/tutorial-7.rst:438 13cba4fb998d4df699505d2223f53691
#, fuzzy
msgid "The only way to guarantee that someone else will have a Python environment that contains everything it needs is to build a completely isolated Python environment. This means there's a completely isolated Python install, and a completely isolated set of dependencies. This is what Briefcase is building when you run ``briefcase build`` - an isolated Python environment. This also explains why ``faker`` isn't installed - it has been installed in your *development* environment, but not in the packaged app."
msgstr "確保其他人擁有一個包含其所需一切的Python環境的唯一方法是建立一個完全隔離的Python環境。這意味著有一個完全隔離的 Python 安裝和一組完全隔離的依賴項。這就是當您執行``briefcase build``時，Briefcase 正在建置的內容—一個獨立的 Python 環境。這也解釋了為什麼未安裝``httpx`` - 它已安裝在您的*開發*環境中，但未安裝在打包的應用程式中。"

#: ../../tutorial/tutorial-7.rst:446 ad29af5896264267b805bbf3729b5613
#, fuzzy
msgid "So - we need to tell Briefcase that our app has an external dependency."
msgstr "因此 - 我們需要告訴 Briefcase 我們的應用程式具有外部相依性。"

#: ../../tutorial/tutorial-7.rst:449 739fd8376bfd4e0582626d8e3e071274
#, fuzzy
msgid "Updating dependencies"
msgstr "更新依賴項"

#: ../../tutorial/tutorial-7.rst:451 90874182ba5c4000a0611165db8e2b86
#, fuzzy
msgid "In the root directory of your app, there is a file named ``pyproject.toml``. This file contains all the app configuration details that you provided when you originally ran ``briefcase new``."
msgstr "在應用程式的根目錄中，有一個名為``pyproject.toml``的檔案。該檔案包含您最初執行``briefcase new``時提供的所有應用程式設定詳細資訊。"

#: ../../tutorial/tutorial-7.rst:455 11d0494a51ba4cb898dae4b33e768efb
#, fuzzy
msgid "``pyproject.toml`` is broken up into sections; one of the sections describes the settings for your app::"
msgstr "``pyproject.toml`` 被分成幾個部分；其中一節描述了您的應用程式的設定：："

#: ../../tutorial/tutorial-7.rst:466 70658f757e3040d685933dfd865ca681
#, fuzzy
msgid "The ``requires`` option describes the dependencies of our application. It is a list of strings, specifying libraries (and, optionally, versions) of libraries that you want to be included with your app."
msgstr "``requires`` 選項描述了我們應用程式的依賴關係。它是一個字串列表，指定您想要包含在應用程式中的庫（以及可選的版本）。"

#: ../../tutorial/tutorial-7.rst:470 5f1be2372ea1443cb8e3d10a862ec14c
#, fuzzy
msgid "Modify the ``requires`` setting so that it reads::"
msgstr "修改``requires``設置，使其顯示為："

#: ../../tutorial/tutorial-7.rst:476 2ad99b7050234ae3bcac9cda7493c5fe
#, fuzzy
msgid "By adding this setting, we're telling Briefcase \"when you build my app, run ``pip install faker`` into the application bundle\". Anything that would be legal input to ``pip install`` can be used here - so, you could specify:"
msgstr "透過添加此設置，我們告訴 Briefcase``當您建立我的應用程式時，在應用程式包中執行``pip install httpx````。任何可以作為``pip install``合法輸入的內容都可以在這裡使用 - 因此，您可以指定："

#: ../../tutorial/tutorial-7.rst:480 6f4f4dba1f0442478a8e77ba33f25920
#, fuzzy
msgid "A specific library version (e.g., ``\"faker==37.3.0\"``);"
msgstr "特定的庫版本（例如``httpx==0.19.0``）；"

#: ../../tutorial/tutorial-7.rst:481 c047eb4fbf2f4ebcac108e92518f4d84
#, fuzzy
msgid "A range of library versions (e.g., ``\"faker>=37\"``);"
msgstr "一系列庫版本（例如``httpx>=0.19``）；"

#: ../../tutorial/tutorial-7.rst:482 336e0bf6d68d4a129d701df7d3212075
#, fuzzy
msgid "A path to a git repository (e.g., ``\"git+https://github.com/joke2k/faker/\"``); or"
msgstr "git 儲存庫的路徑（例如，``\"git+https://github.com/encode/httpx\"``）；或者"

#: ../../tutorial/tutorial-7.rst:484 c887b54ab19c475794efceafecf41489
#, fuzzy
msgid "A local file path (However - be warned: if you give your code to someone else, this path probably won't exist on their machine!)"
msgstr "本機檔案路徑（但是 - 請注意：如果您將程式碼提供給其他人，則該路徑可能不會存在於他們的電腦上！）"

#: ../../tutorial/tutorial-7.rst:487 8676b4144b9b4b38a9fcece2db60fe57
#, fuzzy
msgid "Further down in ``pyproject.toml``, you'll notice other sections that are operating system dependent, like ``[tool.briefcase.app.helloworld.macOS]`` and ``[tool.briefcase.app.helloworld.windows]``. These sections *also* have a ``requires`` setting. These settings allow you to define additional platform-specific dependencies - so, for example, if you need a platform-specific library to handle some aspect of your app, you can specify that library in the platform-specific ``requires`` section, and that setting will only be used for that platform. You will notice that the ``toga`` libraries are all specified in the platform-specific ``requires`` section - this is because the libraries needed to display a user interface are platform specific."
msgstr "在``pyproject.toml``中，您會注意到與作業系統相關的其他部分，例如``[tool.briefcase.app.helloworld.macOS]``和``[tool.briefcase.app.helloworld``.windows]`` 。這些部分*也*有一個``requires``設定。這些設定允許您定義其他特定於平台的依賴項 - 因此，例如，如果您需要特定於平台的庫來處理應用程式的某些方面，您可以在特定於平台的``requires``部分中指定該庫，並且該設定將僅用於該平台。您會注意到``toga``庫都是在特定於平台的``requires``部分中指定的 - 這是因為顯示使用者介面所需的庫是特定於平台的。"

#: ../../tutorial/tutorial-7.rst:498 ac5a44fc7d5a4341823050d2d9c741f1
#, fuzzy
msgid "In our case, we want ``faker`` to be installed on all platforms, so we use the app-level ``requires`` setting. The app-level dependencies will always be installed; the platform-specific dependencies are installed *in addition* to the app-level ones."
msgstr "在我們的例子中，我們希望在所有平台上安裝``httpx``，因此我們使用應用程式層級``requires``設定。應用程式級相依性將始終被安裝；除了*應用程式層級的依賴項之外，還會安裝特定於平台的依賴項。"

#: ../../tutorial/tutorial-7.rst:503 41ce02430ad84a168f95e751b62283f4
#, fuzzy
msgid "Now that we've told Briefcase about our additional requirements, we can try packaging our app again. Ensure that you've saved your changes to ``pyproject.toml``, and then update your app again - this time, passing in the ``-r`` flag. This tells Briefcase to update requirements in the packaged app:"
msgstr "現在我們已經告訴 Briefcase 我們的附加要求，我們可以嘗試再次打包我們的應用程式。確保您已將變更儲存到``pyproject.toml``，然後再次更新您的應用程式 - 這次傳入``-r``標誌。這告訴 Briefcase 更新打包應用程式中的要求："

#: ../../tutorial/tutorial-7.rst:618 70b9b358711042029ba2dd586873f44c
#, fuzzy
msgid "Once you've updated, you can run ``briefcase build`` and ``briefcase run`` - and you should see your packaged app, with the new dialog behavior."
msgstr "更新後，您可以運行``briefcase build``和``briefcase run`` - 您應該會看到打包的應用程序，具有新的對話框行為。"

#: ../../tutorial/tutorial-7.rst:623 072c5ec3d5904145a2f859c10b8fbeb9
#, fuzzy
msgid "The ``-r`` option for updating requirements is also honored by the ``build`` and ``run`` command, so if you want to update, build, and run in one step, you could use ``briefcase run -u -r``."
msgstr "用於更新需求的``-r``選項也受到``build``和``run``命令的支持，因此如果您想一步更新、構建和運行，您可以使用``briefcase``運行-u -r``。"

#: ../../tutorial/tutorial-7.rst:628 78f3eec6e35f4e62b0a3478b0dd1a2fc
msgid "Third-Party Python Packages for Mobile and Web"
msgstr ""

#: ../../tutorial/tutorial-7.rst:630 110c68e2c2d04013af3c1f7c2043027b
msgid "Faker is just one example of a third-party Python package - a collection of code that isn't part what Python provides out of the box. These third-party packages are most commonly distributed using the `Python Package Index (PyPI) <https://pypi.org>`__, and installed into your local virtual environment. We've been using ``pip`` in this tutorial, but there are other options."
msgstr ""

#: ../../tutorial/tutorial-7.rst:636 f25ee018580141dbbd2204d9e07af194
#, fuzzy
msgid "On desktop platforms (macOS, Windows, Linux), essentially any package on PyPI package can be installed into your virtual environment, or added to your app's requirements. However, when building an app for mobile or web platforms, `your options are slightly limited <https://briefcase.readthedocs.io/en/latest/background/faq.html#can-i-use-third-party-python-packages-in-my-app>`__."
msgstr "在桌面平台（macOS、Windows、Linux）上，任何可安裝的``pip``都可以加入您的需求。在行動和網路平台上，`您的選擇略有限制 <https://briefcase.readthedocs.io/en/latest/background/faq.html#can-i-use-third-party-python-packages-in-my-app>`__。"

#: ../../tutorial/tutorial-7.rst:642 c14529c0a0854d0c975d767b6c13b04d
msgid "In short; any *pure Python* package (i.e. any package created from a project written *only* in Python) can be used without difficulty. Some packages, though, are created from projects that contain both Python and other languages (e.g. C, C++, Rust, etc). Code written in those languages needs to be compiled to platform-specific binary modules before it can be used, and those pre-compiled binary modules are only available on specific platforms. Mobile and web platforms have very different requirements than \"standard\" desktop platforms. At this time, most Python packages don't provide pre-compiled binaries for mobile and web platforms."
msgstr ""

#: ../../tutorial/tutorial-7.rst:652 2c38d402f7ec4ffa8b7ed03aed9eddf0
msgid "On PyPI, packages are often provided in a pre-built distribution format called *wheels*. To check whether a package is pure Python, look at the PyPI downloads page for the project. If the wheels provided have a ``-py3-none-any.whl`` suffix (e.g., `Faker <https://pypi.org/project/Faker/37.3.0/#files>`__), then they are pure Python wheels. However, if the wheels have version and platform-specific extensions (e.g., `Pillow <https://pypi.org/project/pillow/11.2.1/#files>`__, which has wheels with suffixes like ``-cp313-cp313-macosx_11_0_arm64.whl`` and ``-cp39-cp39-win_amd64.whl``), then the wheel *contains a binary component*. That package cannot be installed on mobile or web platforms unless a wheel compatible with those platforms has been provided."
msgstr ""

#: ../../tutorial/tutorial-7.rst:663 a3d4734204564e1880b5f9d6494bbddf
msgid "At this time, *most* binary packages on PyPI don't provide mobile- or web-compatible wheels. To fill this gap, BeeWare provides binaries for some popular binary modules (including ``numpy``, ``pandas``, and ``cryptography``). These wheels are *not* distributed on PyPI, but Briefcase will install those wheels if they're available."
msgstr ""

#: ../../tutorial/tutorial-7.rst:669 e390551fe2af4c809cedee9b4bfc6e07
#, fuzzy
msgid "It's *usually* possible to compile binary packages for mobile platforms, but it's not easy to set up -- well outside the scope of an introductory tutorial like this one."
msgstr "BeeWare 可以為一些流行的二進位模組（包括``numpy``、``pandas``和``cryptography``）提供二進位檔案。 *通常* 可以為行動平台編譯軟體包，但設定起來並不容易——這遠遠超出了像本教程這樣的介紹性教程的範圍。"

#: ../../tutorial/tutorial-7.rst:674 c1c67a88095e4a2ab82db59a7b22d634
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-7.rst:676 ffa250cd4a3c4db6bdc295ddb90d23d1
msgid "We've now got an app that uses a third-party library! In :doc:`Tutorial 8 <tutorial-8>` we'll learn how to ensure our app remains responsive as we add more complex application logic."
msgstr ""

#~ msgid "Accessing an API"
#~ msgstr "存取 API"

#~ msgid "A common task an app will need to perform is to make a request on a web API to retrieve data, and display that data to the user. This is a toy app, so we don't have a *real* API to work with, so we'll use the `{JSON} Placeholder API <https://jsonplaceholder.typicode.com>`__ as a source of data."
#~ msgstr "應用程式需要執行的常見任務是在 Web API 上發出請求以檢索數據，並向使用者顯示該數據。這是一個玩具應用程序，因此我們沒有*真正的* API 可供使用，因此我們將使用 `{JSON} Placeholder API <https://jsonplaceholder.typicode.com>`__ 作為來源資料。"

#~ msgid "The {JSON} Placeholder API has a number of \"fake\" API endpoints you can use as test data. One of those APIs is the ``/posts/`` endpoint, which returns fake blog posts. If you open ``https://jsonplaceholder.typicode.com/posts/42`` in your browser, you'll get a JSON payload describing a single post - some `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ content for a blog post with ID 42."
#~ msgstr "{JSON} Placeholder API 有許多``假``API 端點，您可以將其用作測試資料。這些 API 之一是``/posts/``端點，它會傳回虛假的部落格文章。如果您在瀏覽器中開啟 ``https://jsonplaceholder.typicode.com/posts/42``，您將獲得一個描述單一貼文的 JSON 有效負載 - 一些 `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ ID 為42 的部落格文章的內容。"

#~ msgid "The Python standard library contains all the tools you'd need to access an API. However, the built-in APIs are very low level. They are good implementations of the HTTP protocol - but they require the user to manage lots of low-level details, like URL redirection, sessions, authentication, and payload encoding. As a \"normal browser user\" you're probably used to taking these details for granted, as a browser manages these details for you."
#~ msgstr "Python 標準函式庫包含存取 API 所需的所有工具。然而，內建的 API 等級非常低。它們是 HTTP 協定的良好實作 - 但它們要求使用者管理大量低階細節，例如 URL 重新導向、會話、驗證和有效負載編碼。作為``普通瀏覽器用戶``，您可能習慣於將這些詳細資訊視為理所當然，因為瀏覽器會為您管理這些詳細資訊。"

#~ msgid "As a result, people have developed third-party libraries that wrap the built-in APIs and provide a simpler API that is a closer match for the everyday browser experience. We're going to use one of those libraries to access the {JSON} Placeholder API - a library called `httpx <https://www.python-httpx.org>`__."
#~ msgstr "因此，人們開發了第三方函式庫來包裝內建 API，並提供更簡單的 API，更適合日常瀏覽器體驗。我們將使用其中一個函式庫來存取 {JSON} Placeholder API - 一個名為 `httpx <https://www.python-httpx.org>`__ 的函式庫。"

#~ msgid "This will change the ``say_hello()`` callback so that when it is invoked, it will:"
#~ msgstr "這將更改``say_hello()``回調，以便在調用它時，它將："

#~ msgid "make a GET request on the JSON placeholder API to obtain post 42;"
#~ msgstr "對 JSON 佔位符 API 發出 GET 請求以取得 post 42；"

#~ msgid "decode the response as JSON;"
#~ msgstr "將回應解碼為 JSON；"

#~ msgid "extract the body of the post; and"
#~ msgstr "擷取貼文內文；和"

#~ msgid "include the body of that post as the text of the dialog."
#~ msgstr "包括該帖子的正文作為對話框的文字。"

#~ msgid "Some binary packages may not be available"
#~ msgstr "某些二進位套件可能不可用"

#~ msgid "In short; any *pure Python* package (i.e., packages that do *not* contain a binary module) can be used without difficulty. However, if your dependency contains a binary component, it must be compiled; at this time, most Python packages don't provide compilation support for non-desktop platforms."
#~ msgstr "簡而言之;任何 *純Python* 套件（即，*不* 包含二進位模組的套件）都可以毫無困難地使用。但是，如果您的依賴項包含二進位元件，則必須對其進行編譯；目前，大多數Python套件不提供非桌面平台的編譯支援。"

#~ msgid "We've now got an app that uses a third-party library! However, you may have noticed that when you press the button, the app becomes a little unresponsive. Can we do anything to fix this? Turn to :doc:`Tutorial 8 <tutorial-8>` to find out..."
#~ msgstr "我們現在有了一個使用第三方函式庫的應用程式！但是，您可能已經注意到，當您按下按鈕時，應用程式變得有點無響應。我們能做些什麼來解決這個問題嗎？前往 :doc:`教學 8 <tutorial-8>` 找出..."

