# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-09 04:13+0000\n"
"PO-Revision-Date: 2024-04-10 21:02+0000\n"
"Last-Translator: sus <jeffpeng2012@gmail.com>\n"
"Language: zh_TW\n"
"Language-Team: Chinese (Traditional) <https://hosted.weblate.org/projects/beeware/tutorial/tutorial-7/zh_Hant/>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorial/tutorial-7.rst:3 bde39acc997c4564b359918b13eeed6e
#, fuzzy
msgid "Tutorial 7 - Get this (third)-party started"
msgstr "教學 7 - 啟動此（第三方）"

#: ../../tutorial/tutorial-7.rst:5 d9f88c2b92cf4e3f95f6d6186f5a4286
#, fuzzy
msgid "So far, the app we've built has only used our own code, plus the code provided by BeeWare. However, in a real-world app, you'll likely want to use a third-party library, downloaded from the Python Package Index (PyPI)."
msgstr "到目前為止，我們建立的應用程式只使用了我們自己的程式碼，加上 BeeWare 提供的程式碼。但是，在現實應用程式中，您可能需要使用從 Python Package Index (PyPI) 下載的第三方程式庫。"

#: ../../tutorial/tutorial-7.rst:9 dceb551666ef4bd9945400f766ec075a
#, fuzzy
msgid "Let's modify our app to include a third-party library."
msgstr "讓我們修改我們的應用程式以包含第三方程式庫。"

#: ../../tutorial/tutorial-7.rst:12 c258b48b52874238a2c8d3d6c47812a0
msgid "Adding a package"
msgstr ""

#: ../../tutorial/tutorial-7.rst:14 5004d23a35aa4679a6b3487624036c84
msgid "Let's modify our application to say a little bit more than just \"Hi, there!\"."
msgstr ""

#: ../../tutorial/tutorial-7.rst:16 74676d5a00d2444c8301285a463c9ac0
msgid "To generate some more interesting text for the dialog, we're going to use a library called `Faker <https://faker.readthedocs.io/en/stable/>`__ . Faker is a Python package that generates fake content, including names and text blocks. The names and words in the text block are generated from an arbitrary list of words provided by Faker. We're going to use Faker to construct a fake message, as if someone is responding to the user."
msgstr ""

#: ../../tutorial/tutorial-7.rst:23 4904c45e10694f8390786369fea56d0f
#, fuzzy
msgid "We start by adding ``faker`` to our app. Add an import to the top of the ``app.py`` to import ``faker``::"
msgstr "讓我們為我們的應用程式新增一個``httpx`` API 呼叫。將導入新增至``app.py``頂部以導入``httpx``::"

#: ../../tutorial/tutorial-7.rst:28 f7f9597e8cef43a18ddecc122c191159
#, fuzzy
msgid "Then modify the ``say_hello()`` callback so it looks like this::"
msgstr "然後修改``say_hello()``回調，使其看起來像這樣::"

#: ../../tutorial/tutorial-7.rst:39 ac99419af0884f4eae86a5a5ffdd3762
#, fuzzy
msgid "Lets run our updated app in Briefcase developer mode to check that our change has worked."
msgstr "讓我們在公文包開發者模式下運行更新後的應用程序，以檢查我們的更改是否有效。"

#: ../../tutorial/tutorial-7.rst:44 ../../tutorial/tutorial-7.rst:110
#: ../../tutorial/tutorial-7.rst:162 ../../tutorial/tutorial-7.rst:371
#: 4b4609bd17904dd19d765d55be4d82b0 9320810a51cd4459831b990f135be6b2
#: ba0f51e4715047319751be2b54a05093 f94be5b2712a4e6a899b1df811f68df4
msgid "macOS"
msgstr "macOS"

#: ../../tutorial/tutorial-7.rst:64 ../../tutorial/tutorial-7.rst:124
#: ../../tutorial/tutorial-7.rst:200 ../../tutorial/tutorial-7.rst:392
#: 02ff9521accd402ba9a3dc054b1c3906 3db7960fb3f4417cbc68db6c5cf41797
#: 5eb552234eb443b7b0eeca10b87a1276 b9a6ff432d584aaca2101cf35b7c2149
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-7.rst:84 ../../tutorial/tutorial-7.rst:138
#: ../../tutorial/tutorial-7.rst:253 ../../tutorial/tutorial-7.rst:419
#: 0e4d879d5b814060a2cdfb4fe79323ee 24d52c5664ea448788b825d6b730d9be
#: d9a8cf2bc8224c6aa0dfb92a8d94a8a9 f433489c41dd4c7e8c3883a543a1349c
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-7.rst:104 81e7b4debf5b492b93f205d26675a493
#, fuzzy
msgid "What happened? We've added ``faker`` to our *code*, but we haven't added it to our development virtual environment. We can fix this by installing ``faker`` with ``pip``, and then re-running ``briefcase dev``:"
msgstr "發生了什麼事？我們已將``httpx``新增至我們的*程式碼*中，但我們尚未將其新增至我們的開發虛擬環境。我們可以透過用``pip``安裝``httpx``來解決這個問題，然後重新執行``briefcase dev``："

#: ../../tutorial/tutorial-7.rst:117 ../../tutorial/tutorial-7.rst:131
#: ../../tutorial/tutorial-7.rst:145 554fc59aa2bf481a97c330ff88b4afd2
#: 610df50e9f394cf6b8206ab9f7d2de7b 834eabf7b97b4d90b0f71a97352ab8de
#, fuzzy
msgid "When you enter a name and press the button, you should see a dialog that looks something like:"
msgstr "當您輸入名稱並按下按鈕時，您應該會看到一個類似以下內容的對話框："

#: ../../tutorial/tutorial-7.rst:120 dbbc9c9871c7426a9a3f4fcf7ad9e23d
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on macOS"
msgstr "Hello World 教學 7 對話框，在 macOS 上"

#: ../../tutorial/tutorial-7.rst:134 c0de0b70dcc44a35aa962f446ebf2e26
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on Linux"
msgstr "Linux 上的 Hello World 教學 7 對話框"

#: ../../tutorial/tutorial-7.rst:148 b73f08ec5b9a4910a38de5939429dd64
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on Windows"
msgstr "Hello World 教學 7 對話框，在 Windows 上"

#: ../../tutorial/tutorial-7.rst:152 a342dd710f96467c94fdea84f27cfe3a
#, fuzzy
msgid "We've now got a working app, using a third party library, running in development mode!"
msgstr "我們現在有了一個可以使用的應用程序，使用第三方庫，在開發模式下運行！"

#: ../../tutorial/tutorial-7.rst:155 6042a1e59c3f497da2c82d7dcb86a03f
#, fuzzy
msgid "Running the updated app"
msgstr "運行更新的應用程式"

#: ../../tutorial/tutorial-7.rst:157 2e1994370d764731bfbc67ffb4516d66
#, fuzzy
msgid "Let's get this updated application code packaged as a standalone app. Since we've made code changes, we need to follow the same steps as in :doc:`Tutorial 4 <tutorial-4>`:"
msgstr "讓我們將此更新的應用程式程式碼打包為獨立應用程式。由於我們已經更改了程式碼，因此我們需要遵循 :doc:`教程 4 <tutorial-4>` 中的相同步驟："

#: ../../tutorial/tutorial-7.rst:164 ../../tutorial/tutorial-7.rst:202
#: ../../tutorial/tutorial-7.rst:255 5689508b74624a43833ea0594d167b3c
#: a753e097f5fe441b861cf36f1bc1a137 a8a99607b8274f68a4e259b390c6d22e
#, fuzzy
msgid "Update the code in the packaged app:"
msgstr "更新打包應用程式中的程式碼："

#: ../../tutorial/tutorial-7.rst:175 ../../tutorial/tutorial-7.rst:213
#: ../../tutorial/tutorial-7.rst:266 246e6ea9639d4053bf451b3d238da51e
#: b672a08a3f874c62a8d88ee082d479a6 b80d050525264050b73ad9d84ce1971d
#, fuzzy
msgid "Rebuild the app:"
msgstr "重建應用程式："

#: ../../tutorial/tutorial-7.rst:184 ../../tutorial/tutorial-7.rst:227
#: ../../tutorial/tutorial-7.rst:275 16771a1717e44ff8b16d89bbf85f8be5
#: 6599f4e2717a4b76837bee4a5f0ccddc d448877d033046f09c76244aedd5a6dc
#, fuzzy
msgid "And finally, run the app:"
msgstr "最後，運行應用程式："

#: ../../tutorial/tutorial-7.rst:193 ../../tutorial/tutorial-7.rst:284
#: 7ad134300606450f8a16db11c4baa152 f1f08ef5c18a4a088061182ce44d905d
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console, plus a crash dialog:"
msgstr "但是，當應用程式運行時，您會在控制台中看到錯誤，以及崩潰對話框："

#: ../../tutorial/tutorial-7.rst:196 e9d370780762489da5630da749b1dce4
#, fuzzy
msgid "Hello World Tutorial 7 app crash, on macOS"
msgstr "Hello World 教學 7 應用程式崩潰，在 macOS 上"

#: ../../tutorial/tutorial-7.rst:236 f82c73b04cd94aa087816861046f6a7e
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console:"
msgstr "但是，當應用程式運行時，您會在控制台中看到錯誤："

#: ../../tutorial/tutorial-7.rst:287 56edc888dec940678fbc9709e5e45885
#, fuzzy
msgid "Hello World Tutorial 7 app crash, on Windows"
msgstr "Hello World 教學 7 應用程式崩潰，在 Windows 上"

#: ../../tutorial/tutorial-7.rst:291 3af844578e8b4a03b530a86afff6ad6d
#, fuzzy
msgid "Once again, the app has failed to start because ``faker`` has not been installed - but why? Haven't we already installed ``faker``?"
msgstr "再一次，應用程式無法啟動，因為``httpx``已安裝 - 但為什麼呢？我們不是已經安裝了``httpx``了嗎？"

#: ../../tutorial/tutorial-7.rst:294 822839d4a6c54b76942e5a70fd4ef059
#, fuzzy
msgid "We have - but only in the development environment. Your development environment is entirely local to your machine - and is only enabled when you explicitly activate it. Although Briefcase has a development mode, the main reason you'd use Briefcase is to package up your code so you can give it to someone else."
msgstr "我們有 - 但僅限於開發環境。您的開發環境完全位於您的電腦本機 - 並且僅在您明確啟動它時才啟用。儘管Briefcase 有開發模式，但您使用Briefcase 的主要原因是打包您的程式碼，以便提供給其他人。"

#: ../../tutorial/tutorial-7.rst:299 5a3bc019193d4f378ba36b70ec786b8e
#, fuzzy
msgid "The only way to guarantee that someone else will have a Python environment that contains everything it needs is to build a completely isolated Python environment. This means there's a completely isolated Python install, and a completely isolated set of dependencies. This is what Briefcase is building when you run ``briefcase build`` - an isolated Python environment. This also explains why ``faker`` isn't installed - it has been installed in your *development* environment, but not in the packaged app."
msgstr "確保其他人擁有一個包含其所需一切的Python環境的唯一方法是建立一個完全隔離的Python環境。這意味著有一個完全隔離的 Python 安裝和一組完全隔離的依賴項。這就是當您執行``briefcase build``時，Briefcase 正在建置的內容—一個獨立的 Python 環境。這也解釋了為什麼未安裝``httpx`` - 它已安裝在您的*開發*環境中，但未安裝在打包的應用程式中。"

#: ../../tutorial/tutorial-7.rst:307 83c27282a57d4b2dadc31ab86f40e55c
#, fuzzy
msgid "So - we need to tell Briefcase that our app has an external dependency."
msgstr "因此 - 我們需要告訴 Briefcase 我們的應用程式具有外部相依性。"

#: ../../tutorial/tutorial-7.rst:310 3505be1ebd9645ccb138c42534e572a3
#, fuzzy
msgid "Updating dependencies"
msgstr "更新依賴項"

#: ../../tutorial/tutorial-7.rst:312 e9c7d49c37844d22b3384c777a7769b5
#, fuzzy
msgid "In the root directory of your app, there is a file named ``pyproject.toml``. This file contains all the app configuration details that you provided when you originally ran ``briefcase new``."
msgstr "在應用程式的根目錄中，有一個名為``pyproject.toml``的檔案。該檔案包含您最初執行``briefcase new``時提供的所有應用程式設定詳細資訊。"

#: ../../tutorial/tutorial-7.rst:316 a86d3da1700747feaea8384bfa228cb2
#, fuzzy
msgid "``pyproject.toml`` is broken up into sections; one of the sections describes the settings for your app::"
msgstr "``pyproject.toml`` 被分成幾個部分；其中一節描述了您的應用程式的設定：："

#: ../../tutorial/tutorial-7.rst:327 83e520dac5fe410fb6da7f844eb541ee
#, fuzzy
msgid "The ``requires`` option describes the dependencies of our application. It is a list of strings, specifying libraries (and, optionally, versions) of libraries that you want to be included with your app."
msgstr "``requires`` 選項描述了我們應用程式的依賴關係。它是一個字串列表，指定您想要包含在應用程式中的庫（以及可選的版本）。"

#: ../../tutorial/tutorial-7.rst:331 999347d183844f2580d20a77b54dfec0
#, fuzzy
msgid "Modify the ``requires`` setting so that it reads::"
msgstr "修改``requires``設置，使其顯示為："

#: ../../tutorial/tutorial-7.rst:337 4a7c7f430b9f42a7bd60343ce6668a02
#, fuzzy
msgid "By adding this setting, we're telling Briefcase \"when you build my app, run ``pip install faker`` into the application bundle\". Anything that would be legal input to ``pip install`` can be used here - so, you could specify:"
msgstr "透過添加此設置，我們告訴 Briefcase``當您建立我的應用程式時，在應用程式包中執行``pip install httpx````。任何可以作為``pip install``合法輸入的內容都可以在這裡使用 - 因此，您可以指定："

#: ../../tutorial/tutorial-7.rst:341 ae6b1e10b7c042ae8f4674861ec7fa8e
#, fuzzy
msgid "A specific library version (e.g., ``\"faker==37.3.0\"``);"
msgstr "特定的庫版本（例如``httpx==0.19.0``）；"

#: ../../tutorial/tutorial-7.rst:342 cce98c66a9eb499abe2fac6030718dd5
#, fuzzy
msgid "A range of library versions (e.g., ``\"faker>=37\"``);"
msgstr "一系列庫版本（例如``httpx>=0.19``）；"

#: ../../tutorial/tutorial-7.rst:343 422b691b30464b0b9c0590969988d73c
#, fuzzy
msgid "A path to a git repository (e.g., ``\"git+https://github.com/joke2k/faker/\"``); or"
msgstr "git 儲存庫的路徑（例如，``\"git+https://github.com/encode/httpx\"``）；或者"

#: ../../tutorial/tutorial-7.rst:345 33e7e26de39e4bf593f21ae57ec74f91
#, fuzzy
msgid "A local file path (However - be warned: if you give your code to someone else, this path probably won't exist on their machine!)"
msgstr "本機檔案路徑（但是 - 請注意：如果您將程式碼提供給其他人，則該路徑可能不會存在於他們的電腦上！）"

#: ../../tutorial/tutorial-7.rst:348 4f01d1604de148f499a2a986762913c0
#, fuzzy
msgid "Further down in ``pyproject.toml``, you'll notice other sections that are operating system dependent, like ``[tool.briefcase.app.helloworld.macOS]`` and ``[tool.briefcase.app.helloworld.windows]``. These sections *also* have a ``requires`` setting. These settings allow you to define additional platform-specific dependencies - so, for example, if you need a platform-specific library to handle some aspect of your app, you can specify that library in the platform-specific ``requires`` section, and that setting will only be used for that platform. You will notice that the ``toga`` libraries are all specified in the platform-specific ``requires`` section - this is because the libraries needed to display a user interface are platform specific."
msgstr "在``pyproject.toml``中，您會注意到與作業系統相關的其他部分，例如``[tool.briefcase.app.helloworld.macOS]``和``[tool.briefcase.app.helloworld``.windows]`` 。這些部分*也*有一個``requires``設定。這些設定允許您定義其他特定於平台的依賴項 - 因此，例如，如果您需要特定於平台的庫來處理應用程式的某些方面，您可以在特定於平台的``requires``部分中指定該庫，並且該設定將僅用於該平台。您會注意到``toga``庫都是在特定於平台的``requires``部分中指定的 - 這是因為顯示使用者介面所需的庫是特定於平台的。"

#: ../../tutorial/tutorial-7.rst:359 fd818c293da740eb967072be9c9040f7
#, fuzzy
msgid "In our case, we want ``faker`` to be installed on all platforms, so we use the app-level ``requires`` setting. The app-level dependencies will always be installed; the platform-specific dependencies are installed *in addition* to the app-level ones."
msgstr "在我們的例子中，我們希望在所有平台上安裝``httpx``，因此我們使用應用程式層級``requires``設定。應用程式級相依性將始終被安裝；除了*應用程式層級的依賴項之外，還會安裝特定於平台的依賴項。"

#: ../../tutorial/tutorial-7.rst:364 b78260e80d2743999434290a65eee459
#, fuzzy
msgid "Now that we've told Briefcase about our additional requirements, we can try packaging our app again. Ensure that you've saved your changes to ``pyproject.toml``, and then update your app again - this time, passing in the ``-r`` flag. This tells Briefcase to update requirements in the packaged app:"
msgstr "現在我們已經告訴 Briefcase 我們的附加要求，我們可以嘗試再次打包我們的應用程式。確保您已將變更儲存到``pyproject.toml``，然後再次更新您的應用程式 - 這次傳入``-r``標誌。這告訴 Briefcase 更新打包應用程式中的要求："

#: ../../tutorial/tutorial-7.rst:440 7b42c09094ed48d4a000f8f6947fa640
#, fuzzy
msgid "Once you've updated, you can run ``briefcase build`` and ``briefcase run`` - and you should see your packaged app, with the new dialog behavior."
msgstr "更新後，您可以運行``briefcase build``和``briefcase run`` - 您應該會看到打包的應用程序，具有新的對話框行為。"

#: ../../tutorial/tutorial-7.rst:445 a059c7ce3fff4b75b478c91280682bda
#, fuzzy
msgid "The ``-r`` option for updating requirements is also honored by the ``build`` and ``run`` command, so if you want to update, build, and run in one step, you could use ``briefcase run -u -r``."
msgstr "用於更新需求的``-r``選項也受到``build``和``run``命令的支持，因此如果您想一步更新、構建和運行，您可以使用``briefcase``運行-u -r``。"

#: ../../tutorial/tutorial-7.rst:450 6ff2dba0d6b84fdd89d00cdbc81f39d6
msgid "Third-Party Python Packages for Mobile and Web"
msgstr ""

#: ../../tutorial/tutorial-7.rst:452 6cd0fcd3bdcd49b6b16c1ae74a0b972b
msgid "Faker is just one example of a third-party Python package - a collection of code that isn't part what Python provides out of the box. These third-party packages are most commonly distributed using the `Python Package Index (PyPI) <https://pypi.org>`__, and installed into your local virtual environment. We've been using ``pip`` in this tutorial, but there are other options."
msgstr ""

#: ../../tutorial/tutorial-7.rst:458 10624da91b4a4a91a4d14b0cb7f2e440
#, fuzzy
msgid "On desktop platforms (macOS, Windows, Linux), essentially any package on PyPI package can be installed into your virtual environment, or added to your app's requirements. However, when building an app for mobile or web platforms, `your options are slightly limited <https://briefcase.readthedocs.io/en/latest/background/faq.html#can-i-use-third-party-python-packages-in-my-app>`__."
msgstr "在桌面平台（macOS、Windows、Linux）上，任何可安裝的``pip``都可以加入您的需求。在行動和網路平台上，`您的選擇略有限制 <https://briefcase.readthedocs.io/en/latest/background/faq.html#can-i-use-third-party-python-packages-in-my-app>`__。"

#: ../../tutorial/tutorial-7.rst:464 d526ade692d5412d88c2cc4197818b2e
msgid "In short; any *pure Python* package (i.e. any package created from a project written *only* in Python) can be used without difficulty. Some packages, though, are created from projects that contain both Python and other languages (e.g. C, C++, Rust, etc). Code written in those languages needs to be compiled to platform-specific binary modules before it can be used, and those pre-compiled binary modules are only available on specific platforms. Mobile and web platforms have very different requirements than \"standard\" desktop platforms. At this time, most Python packages don't provide pre-compiled binaries for mobile and web platforms."
msgstr ""

#: ../../tutorial/tutorial-7.rst:474 dac4291f24c64884abf3f63a0eed6213
msgid "On PyPI, packages are often provided in a pre-built distribution format called *wheels*. To check whether a package is pure Python, look at the PyPI downloads page for the project. If the wheels provided have a ``-py3-none-any.whl`` suffix (e.g., `Faker <https://pypi.org/project/Faker/37.3.0/#files>`__), then they are pure Python wheels. However, if the wheels have version and platform-specific extensions (e.g., `Pillow <https://pypi.org/project/pillow/11.2.1/#files>`__, which has wheels with suffixes like ``-cp313-cp313-macosx_11_0_arm64.whl`` and ``-cp39-cp39-win_amd64.whl``), then the wheel *contains a binary component*. That package cannot be installed on mobile or web platforms unless a wheel compatible with those platforms has been provided."
msgstr ""

#: ../../tutorial/tutorial-7.rst:485 2341160c3e42466e8fd71bad8886eef6
msgid "At this time, *most* binary packages on PyPI don't provide mobile- or web-compatible wheels. To fill this gap, BeeWare provides binaries for some popular binary modules (including ``numpy``, ``pandas``, and ``cryptography``). These wheels are *not* distributed on PyPI, but Briefcase will install those wheels if they're available."
msgstr ""

#: ../../tutorial/tutorial-7.rst:491 0ad25f7ceabf470d8ba7b4bef12723e9
#, fuzzy
msgid "It's *usually* possible to compile binary packages for mobile platforms, but it's not easy to set up -- well outside the scope of an introductory tutorial like this one."
msgstr "BeeWare 可以為一些流行的二進位模組（包括``numpy``、``pandas``和``cryptography``）提供二進位檔案。 *通常* 可以為行動平台編譯軟體包，但設定起來並不容易——這遠遠超出了像本教程這樣的介紹性教程的範圍。"

#: ../../tutorial/tutorial-7.rst:496 8c95234e10f544fb89999ea6f584bb93
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-7.rst:498 ceb92a851dff44d288301d572b06d5b0
msgid "We've now got an app that uses a third-party library! In :doc:`Tutorial 8 <tutorial-8>` we'll learn how to ensure our app remains responsive as we add more complex application logic."
msgstr ""

#~ msgid "Accessing an API"
#~ msgstr "存取 API"

#~ msgid "A common task an app will need to perform is to make a request on a web API to retrieve data, and display that data to the user. This is a toy app, so we don't have a *real* API to work with, so we'll use the `{JSON} Placeholder API <https://jsonplaceholder.typicode.com>`__ as a source of data."
#~ msgstr "應用程式需要執行的常見任務是在 Web API 上發出請求以檢索數據，並向使用者顯示該數據。這是一個玩具應用程序，因此我們沒有*真正的* API 可供使用，因此我們將使用 `{JSON} Placeholder API <https://jsonplaceholder.typicode.com>`__ 作為來源資料。"

#~ msgid "The {JSON} Placeholder API has a number of \"fake\" API endpoints you can use as test data. One of those APIs is the ``/posts/`` endpoint, which returns fake blog posts. If you open ``https://jsonplaceholder.typicode.com/posts/42`` in your browser, you'll get a JSON payload describing a single post - some `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ content for a blog post with ID 42."
#~ msgstr "{JSON} Placeholder API 有許多``假``API 端點，您可以將其用作測試資料。這些 API 之一是``/posts/``端點，它會傳回虛假的部落格文章。如果您在瀏覽器中開啟 ``https://jsonplaceholder.typicode.com/posts/42``，您將獲得一個描述單一貼文的 JSON 有效負載 - 一些 `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ ID 為42 的部落格文章的內容。"

#~ msgid "The Python standard library contains all the tools you'd need to access an API. However, the built-in APIs are very low level. They are good implementations of the HTTP protocol - but they require the user to manage lots of low-level details, like URL redirection, sessions, authentication, and payload encoding. As a \"normal browser user\" you're probably used to taking these details for granted, as a browser manages these details for you."
#~ msgstr "Python 標準函式庫包含存取 API 所需的所有工具。然而，內建的 API 等級非常低。它們是 HTTP 協定的良好實作 - 但它們要求使用者管理大量低階細節，例如 URL 重新導向、會話、驗證和有效負載編碼。作為``普通瀏覽器用戶``，您可能習慣於將這些詳細資訊視為理所當然，因為瀏覽器會為您管理這些詳細資訊。"

#~ msgid "As a result, people have developed third-party libraries that wrap the built-in APIs and provide a simpler API that is a closer match for the everyday browser experience. We're going to use one of those libraries to access the {JSON} Placeholder API - a library called `httpx <https://www.python-httpx.org>`__."
#~ msgstr "因此，人們開發了第三方函式庫來包裝內建 API，並提供更簡單的 API，更適合日常瀏覽器體驗。我們將使用其中一個函式庫來存取 {JSON} Placeholder API - 一個名為 `httpx <https://www.python-httpx.org>`__ 的函式庫。"

#~ msgid "This will change the ``say_hello()`` callback so that when it is invoked, it will:"
#~ msgstr "這將更改``say_hello()``回調，以便在調用它時，它將："

#~ msgid "make a GET request on the JSON placeholder API to obtain post 42;"
#~ msgstr "對 JSON 佔位符 API 發出 GET 請求以取得 post 42；"

#~ msgid "decode the response as JSON;"
#~ msgstr "將回應解碼為 JSON；"

#~ msgid "extract the body of the post; and"
#~ msgstr "擷取貼文內文；和"

#~ msgid "include the body of that post as the text of the dialog."
#~ msgstr "包括該帖子的正文作為對話框的文字。"

#~ msgid "Some binary packages may not be available"
#~ msgstr "某些二進位套件可能不可用"

#~ msgid "In short; any *pure Python* package (i.e., packages that do *not* contain a binary module) can be used without difficulty. However, if your dependency contains a binary component, it must be compiled; at this time, most Python packages don't provide compilation support for non-desktop platforms."
#~ msgstr "簡而言之;任何 *純Python* 套件（即，*不* 包含二進位模組的套件）都可以毫無困難地使用。但是，如果您的依賴項包含二進位元件，則必須對其進行編譯；目前，大多數Python套件不提供非桌面平台的編譯支援。"

#~ msgid "We've now got an app that uses a third-party library! However, you may have noticed that when you press the button, the app becomes a little unresponsive. Can we do anything to fix this? Turn to :doc:`Tutorial 8 <tutorial-8>` to find out..."
#~ msgstr "我們現在有了一個使用第三方函式庫的應用程式！但是，您可能已經注意到，當您按下按鈕時，應用程式變得有點無響應。我們能做些什麼來解決這個問題嗎？前往 :doc:`教學 8 <tutorial-8>` 找出..."

