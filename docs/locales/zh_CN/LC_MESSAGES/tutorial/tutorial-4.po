msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-06 18:04+0800\n"
"PO-Revision-Date: 2024-01-13 02:06+0000\n"
"Last-Translator: Sheep Cat <xymsyh@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"beeware/tutorial/tutorial-4/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4-dev\n"
"Generated-By: Babel 2.14.0\n"

#: ../../tutorial/tutorial-4.rst:3 7fe4cbf2a0064eb09013538f9bdfef61
#, fuzzy
msgid "Tutorial 4 - Updating your application"
msgstr "教程 4 - 更新应用程序"

#: ../../tutorial/tutorial-4.rst:5 7795a54c281248c1a275a5af0ba5b84b
#, fuzzy
msgid "In the last tutorial, we packaged our application as a native application. If you're dealing with a real-world app, that isn't going to be the end of the story - you'll likely do some testing, discover problems, and need to make some changes. Even if your application is perfect, you'll eventually want to publish version 2 of your application with improvements."
msgstr "在上一教程中，我们将应用程序打包为本地应用程序。如果您面对的是一个真实世界的应用程序，这并不是故事的结束--您可能会进行一些测试，发现一些问题，并需要进行一些修改。即使您的应用程序是完美的，您最终还是希望发布改进后的第二版应用程序。"

#: ../../tutorial/tutorial-4.rst:11 0f4d04d9e5c84fdf8dd50c949ce73e90
#, fuzzy
msgid "So - how do you update your installed app when you make code changes?"
msgstr "那么，在更改代码时如何更新已安装的应用程序？"

#: ../../tutorial/tutorial-4.rst:14 bbc58556ef884a23b31ae8824e16501b
#, fuzzy
msgid "Updating application code"
msgstr "更新应用程序代码"

#: ../../tutorial/tutorial-4.rst:16 3b1c50a09a6b4e57a377bbc7e3d26a68
#, fuzzy
msgid "Our application currently prints to the console when you press the button. However, GUI applications shouldn't really use the console for output. They need to use dialogs to communicate with users."
msgstr "目前，我们的应用程序会在您按下按钮时打印到控制台。但是，图形用户界面应用程序实际上不应该使用控制台进行输出。它们需要使用对话框与用户交流。"

#: ../../tutorial/tutorial-4.rst:20 187e9a4a64ea40f086a59f62a6f0a1d9
#, fuzzy
msgid "Let's add a dialog box to say hello, instead of writing to the console. Modify the ``say_hello`` callback so it looks like this::"
msgstr "让我们添加一个对话框来说 \"你好\"，而不是写入控制台。修改 ``say_hello`` 回调，使它看起来像这样：："

#: ../../tutorial/tutorial-4.rst:29 6122859cfe804077939ffbd134781545
#, fuzzy
msgid "This directs Toga to open a modal dialog box when the button is pressed."
msgstr "这将指示 Toga 在按下按钮时打开一个模态对话框。"

#: ../../tutorial/tutorial-4.rst:31 d03b59bdec0b4ff89f10b24d8085168b
#, fuzzy
msgid "If you run ``briefcase dev``, enter a name, and press the button, you'll see the new dialog box:"
msgstr "如果运行 ``briefcase dev``，输入名称并按下按钮，就会看到新的对话框："

#: ../../tutorial/tutorial-4.rst:36 ../../tutorial/tutorial-4.rst:67 ../../tutorial/tutorial-4.rst:164 2e2b681035db40a1878b3362f793ffe7 3ce780c7548047428b5ddbba4416c237 40f7a793673841a080db293e66e40d81
msgid "macOS"
msgstr "MacOS"

#: ../../tutorial/tutorial-4.rst 55cf1f4746394c2e900748b443d33ee6
#, fuzzy
msgid "Hello World Tutorial 4 dialog, on macOS"
msgstr "Hello World 教程 4 对话框，在 macOS 上使用"

#: ../../tutorial/tutorial-4.rst:41 ../../tutorial/tutorial-4.rst:81 ../../tutorial/tutorial-4.rst:185 42308678bc2b482db2281fb875b4a3b4 c8ce8abc2b584b4993d5bd96f3565b45 e5a6ade2541e43c6bec891e8c30243be
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-4.rst f17df05a76d34c1a82089d328c1530a2
#, fuzzy
msgid "Hello World Tutorial 4 dialog, on Linux"
msgstr "Hello World 教程 4 对话框，在 Linux 上"

#: ../../tutorial/tutorial-4.rst:46 ../../tutorial/tutorial-4.rst:98 ../../tutorial/tutorial-4.rst:213 087ed0fa187a45b8911c0e121fd1e5ed abad56c1148741a3ab416f5f87c428de dacbeb65c2214a3ea17abb862d27167a
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-4.rst 8f8ecba0fae743158ef67ae04f4c2078
#, fuzzy
msgid "Hello World Tutorial 4 dialog, on Windows"
msgstr "Hello World 教程 4 对话框，在 Windows 上"

#: ../../tutorial/tutorial-4.rst:51 0be35d0d8c8f4827a69b22ee6a09146f
#, fuzzy
msgid "However, if you run ``briefcase run``, the dialog box won't appear."
msgstr "但是，如果运行``briefcase run``，对话框就不会出现。"

#: ../../tutorial/tutorial-4.rst:53 ee5596fb417e460d8ff1f60917632d00
#, fuzzy
msgid "Why is this? Well, ``briefcase dev`` operates by running your code in place - it tries to produce as realistic runtime environment for your code as possible, but it doesn't provide or use any of the platform infrastructure for wrapping your code as an application. Part of the process of packaging your app involves copying your code *into* the application bundle - and at the moment, your application still has the old code in it."
msgstr "为什么会这样？简易开发包 \"通过就地运行您的代码来运行--它试图为您的代码提供尽可能逼真的运行环境，但并不提供或使用任何平台基础架构来将您的代码包装成应用程序。打包应用程序的部分过程包括将代码复制到应用程序捆绑包中，目前，您的应用程序中仍有旧代码。"

#: ../../tutorial/tutorial-4.rst:60 dca1084338a040f3947fe75bed0db0b9
#, fuzzy
msgid "So - we need to tell briefcase to update your app, copying in the new version of the code. We *could* do this by deleting the old platform directory and starting from scratch. However, Briefcase provides an easier way - you can update the code for your existing bundled application:"
msgstr "因此，我们需要告诉公文包更新应用程序，复制新版本的代码。我们可以删除旧的平台目录，然后从头开始。不过，Briefcase 提供了一种更简单的方法--您可以更新现有捆绑应用程序的代码："

#: ../../tutorial/tutorial-4.rst:112 6d6badffe71e45ce9212a278e55c18b3
#, fuzzy
msgid "If Briefcase can't find the scaffolded template, it will automatically invoke ``create`` to generate a fresh scaffold."
msgstr "如果 Briefcase 找不到脚手架模板，它会自动调用 ``create`` 生成一个新的脚手架。"

#: ../../tutorial/tutorial-4.rst:115 784a4d4f60b24b82949bfcc41eaf34e1
#, fuzzy
msgid "Now that we've updated the installer code, we can then run ``briefcase build`` to re-compile the app, ``briefcase run`` to run the updated app, and ``briefcase package`` to repackage the application for distribution."
msgstr "更新了安装程序代码后，我们就可以运行 ``briefcase build`` 来重新编译应用程序，运行 ``briefcase run`` 来运行更新后的应用程序，并运行 ``briefcase package`` 来重新打包应用程序以便分发。"

#: ../../tutorial/tutorial-4.rst:119 f8e923cd3ccc4cb681a37af89cba9c0b
#, fuzzy
msgid "(macOS users, remember that as noted in :doc:`Tutorial 3 <tutorial-3>`, for the tutorial we recommend running ``briefcase package`` with the ``--adhoc-sign`` flag to avoid the complexity of setting up a code signing identity and keep the tutorial as simple as possible.)"
msgstr "(macOS 用户请记住，正如 :doc:`Tutorial 3<tutorial-3>` 中所述，我们建议在运行 ``briefcase package`` 时使用 ``--adhoc-sign`` 标志，以避免设置代码签名身份的复杂性，并使教程尽可能简单）。"

#: ../../tutorial/tutorial-4.rst:125 d47a8a4cfaf04fd883a2f423e5079aa0
#, fuzzy
msgid "Update and run in one step"
msgstr "更新和运行一步到位"

#: ../../tutorial/tutorial-4.rst:127 9762f8947b0c4384a3aa7a6ce1caf29d
#, fuzzy
msgid "If you're rapidly iterating code changes, you'll likely want to make a code change, update the application, and immediately re-run your application. For most purposes, developer mode (``briefcase dev``) will be the easiest way to do this sort of rapid iteration; however, if you're testing something about how your application runs as a native binary, or hunting a bug that only manifests when your application is in packaged form, you may need to use repeated calls to ``briefcase run``. To simplify the process of updating and running the bundled app, Briefcase has a shortcut to support this usage pattern - the ``-u`` (or ``--update``) option on the ``run`` command."
msgstr "如果要快速迭代代码更改，很可能需要更改代码、更新应用程序并立即重新运行应用程序。对于大多数情况来说，开发人员模式 (``briefcase dev``) 是进行这种快速迭代的最简单方法；但是，如果您要测试应用程序作为本地二进制文件运行的方式，或查找一个只有在应用程序打包时才会出现的错误，您可能需要反复调用 ``briefcase run``。为了简化更新和运行打包应用程序的过程，Briefcase 提供了支持这种使用模式的快捷方式 - ``run``命令上的 ``-u``（或 ``--update``）选项。"

#: ../../tutorial/tutorial-4.rst:137 d54987c8d0124f38beda56b8bea9cf22
#, fuzzy
msgid "Let's try making another change. You may have noticed that if you don't type a name in the text input box, the dialog will say \"Hello, \". Let's modify the ``say_hello`` function again to handle this edge case."
msgstr "让我们尝试做另一个改动。您可能已经注意到，如果您不在文本输入框中输入姓名，对话框就会显示 \"Hello, \"。 让我们再次修改 ``say_hello`` 函数，以处理这种边缘情况。"

#: ../../tutorial/tutorial-4.rst:141 3b8a2ee2b7e349cba2c338e0835f9516
#, fuzzy
msgid "At the top of the file, between the imports and the ``class HelloWorld`` definition, add a utility methods to generate an appropriate greeting depending on the value of the name that has been provided::"
msgstr "在文件顶部，在导入和 \"类 HelloWorld \"定义之间，添加一个实用程序方法，以根据所提供的名称值生成适当的问候语：："

#: ../../tutorial/tutorial-4.rst:151 fc1fb0583615469c847de885fc14aee6
#, fuzzy
msgid "Then, modify the ``say_hello`` callback to use this new utility method::"
msgstr "然后，修改 ``say_hello`` 回调，以使用这个新的实用程序方法：："

#: ../../tutorial/tutorial-4.rst:159 6a19eb37cf8c40d08e6cad4eed780f8a
#, fuzzy
msgid "Run your app in development mode (with ``briefcase dev``) to confirm that the new logic works; then update, build and run the app with one command:"
msgstr "在开发模式下运行应用程序（使用 ``briefcase dev``），以确认新逻辑是否有效；然后使用一条命令更新、构建和运行应用程序："

#: ../../tutorial/tutorial-4.rst:229 9e4f16ac85094be6a6b3d5d6caa58217
#, fuzzy
msgid "The package command also accepts the ``-u`` argument, so if you make a change to your application code and want to repackage immediately, you can run ``briefcase package -u``."
msgstr "package 命令也接受 ``-u`` 参数，因此如果你修改了应用程序代码并希望立即重新打包，可以运行 ``briefcase package -u``。"

#: ../../tutorial/tutorial-4.rst:234 8af764dacceb41f291fce27b91879c5e
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-4.rst:236 2bd6a387bb8d4c9daf8cd528e4b7af05
#, fuzzy
msgid "We now have our application packaged for distribution on desktop platforms, and we've been able to update the code in our application."
msgstr "现在，我们的应用程序已经打包，可以在桌面平台上发布，我们也可以更新应用程序中的代码。"

#: ../../tutorial/tutorial-4.rst:239 d206e2e549a84c60bcc9eb543b4e0adb
#, fuzzy
msgid "But what about mobile? In :doc:`Tutorial 5 <tutorial-5/index>`, we'll convert our application into a mobile application, and deploy it onto a device simulator, and onto a phone."
msgstr "但是移动应用程序呢？在 :doc:`Tutorial 5 <tutorial-5/index>` 中，我们将把应用程序转换为移动应用程序，并将其部署到设备模拟器和手机上。"
