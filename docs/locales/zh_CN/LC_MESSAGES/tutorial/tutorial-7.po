
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-22 18:48+0000\n"
"PO-Revision-Date: 2024-01-14 12:29+0000\n"
"Last-Translator: Russell Keith-Magee <russell@keith-magee.com>\n"
"Language: zh_CN\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/beeware/tutorial/tutorial-7/zh_Hans/>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../tutorial/tutorial-7.rst:3 6b2615ec94ae43e5903abac442c3b41a
#, fuzzy
msgid "Tutorial 7 - Get this (third)-party started"
msgstr "教程 7 - 启动这个（第三）派对"

#: ../../tutorial/tutorial-7.rst:5 80041d02f6a345c09a2e699420bb553b
#, fuzzy
msgid "So far, the app we've built has only used our own code, plus the code provided by BeeWare. However, in a real-world app, you'll likely want to use a third-party library, downloaded from the Python Package Index (PyPI)."
msgstr "到目前为止，我们构建的应用程序只使用了我们自己的代码和 BeeWare 提供的代码。不过，在实际应用中，您很可能需要使用从 Python 软件包索引（PyPI）下载的第三方库。"

#: ../../tutorial/tutorial-7.rst:9 52a52a7c1bb44e08a6bdbe3397150a34
#, fuzzy
msgid "Let's modify our app to include a third-party library."
msgstr "让我们修改应用程序，加入第三方库。"

#: ../../tutorial/tutorial-7.rst:12 d247c262837d497db2b5c94ac83a06d8
#, fuzzy
msgid "Accessing an API"
msgstr "访问应用程序接口"

#: ../../tutorial/tutorial-7.rst:14 a9c040274a504711ae46fb2f6c6026b2
#, fuzzy
msgid "A common task an app will need to perform is to make a request on a web API to retrieve data, and display that data to the user. This is a toy app, so we don't have a *real* API to work with, so we'll use the `{JSON} Placeholder API <https://jsonplaceholder.typicode.com>`__ as a source of data."
msgstr "应用程序需要执行的一项常见任务是向网络应用程序接口发出请求以获取数据，并将数据显示给用户。这是一个玩具应用程序，因此我们没有*真正*的 API 可供使用，所以我们将使用 `{JSON} 占位符 API <https://jsonplaceholder.typicode.com>`__ 作为数据源。"

#: ../../tutorial/tutorial-7.rst:19 205d631a08064522a4e40125ad81b899
#, fuzzy
msgid "The {JSON} Placeholder API has a number of \"fake\" API endpoints you can use as test data. One of those APIs is the ``/posts/`` endpoint, which returns fake blog posts. If you open ``https://jsonplaceholder.typicode.com/posts/42`` in your browser, you'll get a JSON payload describing a single post - some `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ content for a blog post with ID 42."
msgstr "{JSON} 占位符 API 有许多 \"伪造 \"的 API 端点，您可以将其用作测试数据。其中一个 API 是 ``/posts/`` 端点，它会返回虚假的博客文章。如果在浏览器中打开 ``https://jsonplaceholder.typicode.com/posts/42`` ，就会得到一个描述单篇博文的 JSON 有效载荷--ID 为 42 的博文的一些 `Lorum ipsum <https://en.wikipedia.org/wiki/Lorem_ipsum>`__ 内容。"

#: ../../tutorial/tutorial-7.rst:26 1a0c6d30a2ec4c8491bde7ec9de0e1f8
#, fuzzy
msgid "The Python standard library contains all the tools you'd need to access an API. However, the built-in APIs are very low level. They are good implementations of the HTTP protocol - but they require the user to manage lots of low-level details, like URL redirection, sessions, authentication, and payload encoding. As a \"normal browser user\" you're probably used to taking these details for granted, as a browser manages these details for you."
msgstr "Python 标准库包含访问 API 所需的所有工具。然而，内置的 API 是非常低级的。它们很好地实现了 HTTP 协议，但需要用户管理大量低级细节，如 URL 重定向、会话、身份验证和有效负载编码。作为一名 \"普通浏览器用户\"，你可能已经习惯了将这些细节视为理所当然，因为浏览器会为你管理这些细节。"

#: ../../tutorial/tutorial-7.rst:33 b71de501e0cb42ebb1a287687b58fffe
#, fuzzy
msgid "As a result, people have developed third-party libraries that wrap the built-in APIs and provide a simpler API that is a closer match for the everyday browser experience. We're going to use one of those libraries to access the {JSON} Placeholder API - a library called `httpx <https://www.python-httpx.org>`__."
msgstr "因此，人们开发了第三方库来封装内置的 API，并提供更简单的 API，使其更符合日常的浏览器体验。我们将使用其中一个库来访问 {JSON} 占位符 API - 一个名为 `httpx <https://www.python-httpx.org>`__ 的库。"

#: ../../tutorial/tutorial-7.rst:38 9b19a31caae445e7862bff5d14539c32
#, fuzzy
msgid "Let's add a ``httpx`` API call to our app. Add an import to the top of the ``app.py`` to import ``httpx``::"
msgstr "让我们在应用程序中添加一个 ``httpx`` API 调用。在 ``app.py`` 顶部添加导入，以导入 ``httpx``:："

#: ../../tutorial/tutorial-7.rst:43 491a4cb9f2c348df94ffe85b2628dded
#, fuzzy
msgid "Then modify the ``say_hello()`` callback so it looks like this::"
msgstr "然后修改 ``say_hello()`` 回调，使其看起来像这样：："

#: ../../tutorial/tutorial-7.rst:56 14ac9987b58e443f8beadaf9a0e81ef2
msgid "This will change the ``say_hello()`` callback so that when it is invoked, it will:"
msgstr "这将更改 ``say_hello()`` 回调，使它在被调用时，会:"

#: ../../tutorial/tutorial-7.rst:59 d6ff754f12794860a35eeb68e2dbaf68
#, fuzzy
msgid "make a GET request on the JSON placeholder API to obtain post 42;"
msgstr "在 JSON 占位符 API 上发出 GET 请求，以获取职位 42；"

#: ../../tutorial/tutorial-7.rst:61 af5c1a6b42a8444086938423724fc698
#, fuzzy
msgid "decode the response as JSON;"
msgstr "将响应解码为 JSON 格式；"

#: ../../tutorial/tutorial-7.rst:63 40fd1491d9934f2086b0208b4be8cb1c
#, fuzzy
msgid "extract the body of the post; and"
msgstr "提取帖子正文；以及"

#: ../../tutorial/tutorial-7.rst:65 d3678e0de20447e68fedebd87c279cad
#, fuzzy
msgid "include the body of that post as the text of the dialog."
msgstr "将该帖子的正文作为对话框的文本。"

#: ../../tutorial/tutorial-7.rst:67 fc7a8fe98ad34f13ae20d573a6ebe0e2
#, fuzzy
msgid "Lets run our updated app in Briefcase developer mode to check that our change has worked."
msgstr "让我们在公文包开发者模式下运行更新后的应用程序，检查我们的更改是否有效。"

#: ../../tutorial/tutorial-7.rst:72 ../../tutorial/tutorial-7.rst:138
#: ../../tutorial/tutorial-7.rst:190 ../../tutorial/tutorial-7.rst:415
#: 005c87468e614b289490bb0ae8ed6c50 5a726f5b33554f3381dfcdbad9c059b7
#: c86313bb53b44c2a901260d849299455 dd3b1812eb1f4efdaef4c0104f23a920
msgid "macOS"
msgstr "MacOS"

#: ../../tutorial/tutorial-7.rst:92 ../../tutorial/tutorial-7.rst:152
#: ../../tutorial/tutorial-7.rst:228 ../../tutorial/tutorial-7.rst:436
#: 2d204be785cc4b5bb66b02ceb68dcd70 44eb6135adb34195bee8bff6b3b80d15
#: 6c34301bae3f4d4d8776b408249130b6 abc9269eaca64324a07c22cf1938ec9d
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-7.rst:112 ../../tutorial/tutorial-7.rst:166
#: ../../tutorial/tutorial-7.rst:281 ../../tutorial/tutorial-7.rst:463
#: 63b5f67e4270458abe3f8db2965aa560 8327e73b93834958a6342cdb74c1ba51
#: ae724ee6ee4a4d5784d9feca04d6a5ac bd2c829408fd4a0cb63bae016761e8d5
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-7.rst:132 b7726b9114294f7ea4f73df574fe4cb3
#, fuzzy
msgid "What happened? We've added ``httpx`` to our *code*, but we haven't added it to our development virtual environment. We can fix this by installing ``httpx`` with ``pip``, and then re-running ``briefcase dev``:"
msgstr "发生了什么？我们已经将 ``httpx`` 添加到我们的代码*中，但我们还没有将它添加到我们的开发虚拟环境中。我们可以用 ``pip`` 安装 ``httpx``，然后重新运行 ``briefcase dev``："

#: ../../tutorial/tutorial-7.rst:145 ../../tutorial/tutorial-7.rst:159
#: ../../tutorial/tutorial-7.rst:173 0792d266d0344daeaab81c859ae1a1c5
#: 0d472a11fac44f50bd7eb5f3dc94bb12 2e682b874b204ecab0ce740944342a93
#, fuzzy
msgid "When you enter a name and press the button, you should see a dialog that looks something like:"
msgstr "输入名称并按下按钮后，您会看到一个类似的对话框："

#: ../../tutorial/tutorial-7.rst:148 bc46ec09af714ce6902ec59091027160
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on macOS"
msgstr "Hello World 教程 7 对话框，在 macOS 上运行"

#: ../../tutorial/tutorial-7.rst:162 dcebe9d73e6145f392886878a48e13c0
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on Linux"
msgstr "Hello World 教程 7 对话框，在 Linux 上"

#: ../../tutorial/tutorial-7.rst:176 cd2c446246514eb0b4bb5a97e3d98049
#, fuzzy
msgid "Hello World Tutorial 7 dialog, on Windows"
msgstr "Hello World 教程 7 对话框，在 Windows 上"

#: ../../tutorial/tutorial-7.rst:180 49da8dcc057743b5a92bf8991c669d88
#, fuzzy
msgid "We've now got a working app, using a third party library, running in development mode!"
msgstr "现在，我们已经有了一个可正常运行的应用程序，它使用第三方库，以开发模式运行！"

#: ../../tutorial/tutorial-7.rst:183 3650561f23644430a8eace5387c044ac
#, fuzzy
msgid "Running the updated app"
msgstr "运行更新后的应用程序"

#: ../../tutorial/tutorial-7.rst:185 6acba9855f7841949c7df5d5e03d58f5
#, fuzzy
msgid "Let's get this updated application code packaged as a standalone app. Since we've made code changes, we need to follow the same steps as in :doc:`Tutorial 4 <tutorial-4>`:"
msgstr "让我们将更新后的应用程序代码打包为独立应用程序。由于我们对代码进行了修改，因此需要遵循 :doc:`Tutorial 4<tutorial-4>` 中的相同步骤："

#: ../../tutorial/tutorial-7.rst:192 ../../tutorial/tutorial-7.rst:230
#: ../../tutorial/tutorial-7.rst:283 52b54a2820c9434182c3a320a646cb84
#: 581c1bd09efa4811847d7e6e1722fd9c f1cdd70af5bd4f1db4dd01fec0aa527a
#, fuzzy
msgid "Update the code in the packaged app:"
msgstr "更新打包应用程序中的代码："

#: ../../tutorial/tutorial-7.rst:203 ../../tutorial/tutorial-7.rst:241
#: ../../tutorial/tutorial-7.rst:294 927cb0a7819e48e3869927dcfc84ded3
#: a908a9f8c9b046d1899a46a3886581a0 fc97caf71a254be098ac118f44f88871
#, fuzzy
msgid "Rebuild the app:"
msgstr "重建应用程序："

#: ../../tutorial/tutorial-7.rst:212 ../../tutorial/tutorial-7.rst:255
#: ../../tutorial/tutorial-7.rst:303 3eae5d516d1f49ee9cde2c5ea3a37951
#: 44290f640fb840f1af700b1e58c4a864 e9959105c9924cfca235b1ae2aa7a903
#, fuzzy
msgid "And finally, run the app:"
msgstr "最后，运行应用程序："

#: ../../tutorial/tutorial-7.rst:221 ../../tutorial/tutorial-7.rst:312
#: 0b48c996416a4e3e9b5891a6100f137b 0edd1ba5d53e413fa6ef42630814bffa
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console, plus a crash dialog:"
msgstr "但是，当程序运行时，你会在控制台中看到一个错误，还有一个崩溃对话框："

#: ../../tutorial/tutorial-7.rst:224 8fc48d7a6a2d41a4a782b0de38e9b595
#, fuzzy
msgid "Hello World Tutorial 7 app crash, on macOS"
msgstr "MacOS 上的 Hello World Tutorial 7 应用程序崩溃"

#: ../../tutorial/tutorial-7.rst:264 9d69e9a4804d4fcbbf7cc8ae3ea9626a
#, fuzzy
msgid "However, when the app runs, you'll see an error in the console:"
msgstr "但是，当应用程序运行时，您会在控制台中看到一个错误："

#: ../../tutorial/tutorial-7.rst:315 b668aa40c3444555bc975af37c9ffc0c
#, fuzzy
msgid "Hello World Tutorial 7 app crash, on Windows"
msgstr "Hello World 教程 7》应用程序崩溃，在 Windows 系统上"

#: ../../tutorial/tutorial-7.rst:319 c08292ac303f4471a64dc3f5a243e023
#, fuzzy
msgid "Once again, the app has failed to start because ``httpx`` has not been installed - but why? Haven't we already installed ``httpx``?"
msgstr "应用程序再次启动失败，因为已经安装了 ``httpx`` - 但为什么呢？我们不是已经安装了 ``httpx`` 吗？"

#: ../../tutorial/tutorial-7.rst:322 5a221f18dbcf4efcb588589f81f7bd8c
#, fuzzy
msgid "We have - but only in the development environment. Your development environment is entirely local to your machine - and is only enabled when you explicitly activate it. Although Briefcase has a development mode, the main reason you'd use Briefcase is to package up your code so you can give it to someone else."
msgstr "我们有，但仅限于开发环境。你的开发环境完全在你的机器本地，只有当你明确激活它时才会启用。虽然公文包有开发模式，但使用公文包的主要原因是打包你的代码，这样你就可以把它交给别人。"

#: ../../tutorial/tutorial-7.rst:327 06dfc884bfb1494992a5a89417dea1d9
#, fuzzy
msgid "The only way to guarantee that someone else will have a Python environment that contains everything it needs is to build a completely isolated Python environment. This means there's a completely isolated Python install, and a completely isolated set of dependencies. This is what Briefcase is building when you run ``briefcase build`` - an isolated Python environment. This also explains why ``httpx`` isn't installed - it has been installed in your *development* environment, but not in the packaged app."
msgstr "要保证别人的 Python 环境包含它所需要的一切，唯一的办法就是构建一个完全隔离的 Python 环境。这意味着有一个完全独立的 Python 安装，和一套完全独立的依赖关系。这就是当你运行 ``briefcase build`` 时，Briefcase 正在构建的 - 一个隔离的 Python 环境。这也解释了为什么没有安装 ``httpx`` - 它已经安装在你的开发环境中，但没有安装在打包的应用程序中。"

#: ../../tutorial/tutorial-7.rst:335 6d79f1eae58945178440c0c5f1d1db15
#, fuzzy
msgid "So - we need to tell Briefcase that our app has an external dependency."
msgstr "因此，我们需要告诉 Briefcase，我们的应用程序有一个外部依赖关系。"

#: ../../tutorial/tutorial-7.rst:338 628218220a2048b9b6bf2df96e52ed10
#, fuzzy
msgid "Updating dependencies"
msgstr "更新依赖项"

#: ../../tutorial/tutorial-7.rst:340 7c1679c7b05c44f687c814043bca099c
#, fuzzy
msgid "In the root directory of your app, there is a file named ``pyproject.toml``. This file contains all the app configuration details that you provided when you originally ran ``briefcase new``."
msgstr "在应用程序的根目录中，有一个名为 ``pyproject.toml`` 的文件。该文件包含您最初运行 ``briefcase new`` 时提供的所有应用程序配置详细信息。"

#: ../../tutorial/tutorial-7.rst:344 82bd2f27411d47d082dacd7291cbe243
#, fuzzy
msgid "``pyproject.toml`` is broken up into sections; one of the sections describes the settings for your app::"
msgstr "pyproject.toml \"分为多个部分，其中一部分描述了应用程序的设置：："

#: ../../tutorial/tutorial-7.rst:355 520b01c82e214d299ed45f2111bb021a
#, fuzzy
msgid "The ``requires`` option describes the dependencies of our application. It is a list of strings, specifying libraries (and, optionally, versions) of libraries that you want to be included with your app."
msgstr "requires \"选项描述了应用程序的依赖关系。它是一个字符串列表，其中指定了您希望应用程序包含的库（以及可选的版本）。"

#: ../../tutorial/tutorial-7.rst:359 9760cbe1817748748feaa290ad9fc728
#, fuzzy
msgid "Modify the ``requires`` setting so that it reads::"
msgstr "修改 ``requires`` 设置为：："

#: ../../tutorial/tutorial-7.rst:365 61820fdbbb0e46ec9115f572b61f6f8a
#, fuzzy
msgid "By adding this setting, we're telling Briefcase \"when you build my app, run ``pip install httpx`` into the application bundle\". Anything that would be legal input to ``pip install`` can be used here - so, you could specify:"
msgstr "通过添加此设置，我们告诉 Briefcase \"当你构建我的应用程序时，运行 ``pip install httpx`` 到应用程序捆绑包中\"。任何可以合法输入到 ``pip install`` 的内容都可以在这里使用--因此，你可以指定："

#: ../../tutorial/tutorial-7.rst:369 376b4955126a4c6791d0db69fbe7d4a6
#, fuzzy
msgid "A specific library version (e.g., ``\"httpx==0.19.0\"``);"
msgstr "特定的库版本（例如，``\"httpx===0.19.0\"``）；"

#: ../../tutorial/tutorial-7.rst:370 223ec130d6af4756a03b2e5765232033
#, fuzzy
msgid "A range of library versions (e.g., ``\"httpx>=0.19\"``);"
msgstr "一系列库版本（例如，``\"httpx>=0.19\"``）；"

#: ../../tutorial/tutorial-7.rst:371 93586212104c43b6b4bb7d1813561513
#, fuzzy
msgid "A path to a git repository (e.g., ``\"git+https://github.com/encode/httpx\"``); or"
msgstr "指向 git 仓库的路径（例如，``\"git+https://github.com/encode/httpx\"``）；或"

#: ../../tutorial/tutorial-7.rst:373 870a13884c6c42419cc3479955426bc5
#, fuzzy
msgid "A local file path (However - be warned: if you give your code to someone else, this path probably won't exist on their machine!)"
msgstr "本地文件路径（不过需要注意的是：如果你把代码交给别人，这个路径很可能不存在于他们的机器上！）。"

#: ../../tutorial/tutorial-7.rst:376 f66cd98d7a064027bc175a35ee5eed36
#, fuzzy
msgid "Further down in ``pyproject.toml``, you'll notice other sections that are operating system dependent, like ``[tool.briefcase.app.helloworld.macOS]`` and ``[tool.briefcase.app.helloworld.windows]``. These sections *also* have a ``requires`` setting. These settings allow you to define additional platform-specific dependencies - so, for example, if you need a platform-specific library to handle some aspect of your app, you can specify that library in the platform-specific ``requires`` section, and that setting will only be used for that platform. You will notice that the ``toga`` libraries are all specified in the platform-specific ``requires`` section - this is because the libraries needed to display a user interface are platform specific."
msgstr "在 ``pyproject.toml`` 中的更下面部分，你会注意到与操作系统相关的其他部分，如 ``[tool.briefcase.app.helloworld.macOS]`` 和 ``[tool.briefcase.app.helloworld.windows]``。这些部分**也有一个 ``requires`` 设置。这些设置允许你定义额外的特定平台依赖关系，例如，如果你需要一个特定平台的库来处理应用程序的某些方面，你可以在特定平台的 ``requires`` 部分中指定该库，而该设置将仅用于该平台。你会注意到，所有的 ``toga`` 库都是在特定平台的 ``requires`` 部分中指定的，这是因为显示用户界面所需的库都是特定平台的。"

#: ../../tutorial/tutorial-7.rst:387 ff3211a08e4444058f40842405f5b338
#, fuzzy
msgid "In our case, we want ``httpx`` to be installed on all platforms, so we use the app-level ``requires`` setting. The app-level dependencies will always be installed; the platform-specific dependencies are installed *in addition* to the app-level ones."
msgstr "在我们的例子中，我们希望 ``httpx`` 安装在所有平台上，因此使用了应用程序级的 ``requires`` 设置。应用程序级的依赖项始终会被安装；特定平台的依赖项会在应用程序级的依赖项之外*安装。"

#: ../../tutorial/tutorial-7.rst:392 f62620cc05644c429e0d0c3e83a0d701
#, fuzzy
msgid "Some binary packages may not be available"
msgstr "某些二进制软件包可能不可用"

#: ../../tutorial/tutorial-7.rst:394 dcb74cf2800f4006b402c0dc6f4f9d6a
#, fuzzy
msgid "On desktop platforms (macOS, Windows, Linux), any ``pip``-installable can be added to your requirements. On mobile and web platforms, `your options are slightly limited <https://briefcase.readthedocs.io/en/latest/background/faq.html#can-i-use-third-party-python-packages-in-my-app>`__."
msgstr "在桌面平台（macOS、Windows、Linux）上，任何可安装的 \"pip \"都可以添加到您的需求中。在移动和网络平台上，\"您的选择略显有限 <https://briefcase.readthedocs.io/en/latest/background/faq.html#can-i-use-third-party-python-packages-in-my-app>`__。"

#: ../../tutorial/tutorial-7.rst:398 f1958699f45c42c495cd5bcd4690076d
#, fuzzy
msgid "In short; any *pure Python* package (i.e., packages that do *not* contain a binary module) can be used without difficulty. However, if your dependency contains a binary component, it must be compiled; at this time, most Python packages don't provide compilation support for non-desktop platforms."
msgstr "简而言之，任何*纯 Python* 包（即*不包含二进制模块的包）都可以毫无困难地使用。但是，如果您的依赖包包含二进制组件，则必须对其进行编译；目前，大多数 Python 包都不支持非桌面平台的编译。"

#: ../../tutorial/tutorial-7.rst:403 be0cdfd36daa4c958b7533c25ac54fea
#, fuzzy
msgid "BeeWare can provide binaries for some popular binary modules (including ``numpy``, ``pandas``, and ``cryptography``). It's *usually* possible to compile packages for mobile platforms, but it's not easy to set up -- well outside the scope of an introductory tutorial like this one."
msgstr "BeeWare可以为一些流行的二进制模块（包括 \"numpy\"、\"pandas \"和 \"加密\"）提供二进制文件。为移动平台编译软件包通常是可行的，但设置起来并不容易--这已经超出了本入门教程的范围。"

#: ../../tutorial/tutorial-7.rst:408 e552ddaa2b0e40d682339de86944977f
#, fuzzy
msgid "Now that we've told Briefcase about our additional requirements, we can try packaging our app again. Ensure that you've saved your changes to ``pyproject.toml``, and then update your app again - this time, passing in the ``-r`` flag. This tells Briefcase to update requirements in the packaged app:"
msgstr "既然我们已经告诉了 Briefcase 我们的额外需求，那么我们就可以再次尝试打包应用程序了。确保已将更改保存到 ``pyproject.toml``，然后再次更新应用程序--这一次，传递 ``-r`` 标志。这将告诉 Briefcase 更新打包应用程序中的需求："

#: ../../tutorial/tutorial-7.rst:484 d9075479e19f4140995dca5686ce0592
#, fuzzy
msgid "Once you've updated, you can run ``briefcase build`` and ``briefcase run`` - and you should see your packaged app, with the new dialog behavior."
msgstr "更新完成后，您可以运行 ``briefcase build`` 和 ``briefcase run`` - 您应该会看到打包后的应用程序，并带有新的对话框行为。"

#: ../../tutorial/tutorial-7.rst:489 cc31748b60e04679a6b5b504175f6f72
#, fuzzy
msgid "The ``-r`` option for updating requirements is also honored by the ``build`` and ``run`` command, so if you want to update, build, and run in one step, you could use ``briefcase run -u -r``."
msgstr "用于更新需求的 ``-r`` 选项也会被 ``build` 和 ``run` 命令接受，因此如果你想一步完成更新、编译和运行，可以使用 ``briefcase run -u -r``。"

#: ../../tutorial/tutorial-7.rst:495 18bc1c45506e437392ea95e7eac5cab3
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-7.rst:497 d28d07daaa9c4572843b8297ff44a7a4
#, fuzzy
msgid "We've now got an app that uses a third-party library! However, you may have noticed that when you press the button, the app becomes a little unresponsive. Can we do anything to fix this? Turn to :doc:`Tutorial 8 <tutorial-8>` to find out..."
msgstr "我们现在有了一个使用第三方库的应用程序！不过，您可能已经注意到，当您按下按钮时，应用程序会变得有点反应迟钝。我们能解决这个问题吗？请访问 :doc:`Tutorial 8<tutorial-8>` 了解详情..."

