
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-20 10:21+0000\n"
"PO-Revision-Date: 2025-04-20 04:04+0000\n"
"Last-Translator: John <johnzhou721@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/projects/beeware/tutorial/tutorial-2/zh_Hans/>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorial/tutorial-2.rst:3 0e0bf46fc8934c8289687ee0acc89ee0
msgid "Tutorial 2 - Making it interesting"
msgstr "教程 2 - 使之更有趣"

#: ../../tutorial/tutorial-2.rst:5 ea360f6e605d4ac291cc322f62dba623
msgid "In :doc:`Tutorial 1 <tutorial-1>`, we generated a stub project that was able to run, but we didn't write any code ourselves. Let's take a look at what was generated for us."
msgstr "在 :doc:`教程 1<tutorial-1>` 中，我们生成了一个可以运行的基础项目，但我们自己并没有编写任何代码。让我们看看为我们生成了什么。"

#: ../../tutorial/tutorial-2.rst:10 1ea3bcb10fdc4ace818b5538db1a61ab
msgid "What was generated"
msgstr "生成的内容"

#: ../../tutorial/tutorial-2.rst:12 15c0dceab51948f783504e2fc188ff78
msgid "In the ``src/helloworld`` directory, you should see 3 files: ``__init__.py``, ``__main__.py`` and ``app.py``."
msgstr "在 ``src/helloworld`` 目录中，你应该看到 3 个文件：``__init__.py``、``__main__.py`` 和 ``app.py``。"

#: ../../tutorial/tutorial-2.rst:15 14cbf3e7d720449983778f1b6308715f
msgid "``__init__.py`` marks the ``helloworld`` directory as an importable Python module. It is an empty file; the very fact it exists tells the Python interpreter that the ``helloworld`` directory defines a module."
msgstr "``__init__.py`` 将 ``helloworld`` 目录标记为可导入的 Python 模块。这是一个空文件；它的存在告诉 Python 解释器 helloworld 目录定义了一个模块。"

#: ../../tutorial/tutorial-2.rst:19 119d9d5522fb4ac288668ceececf62e6
msgid "``__main__.py`` marks the ``helloworld`` module as a special kind of module - an executable module. If you try to run the ``helloworld`` module using ``python -m helloworld``, the ``__main__.py`` file is where Python will start executing. The contents of ``__main__.py`` is relatively simple::"
msgstr "``__main__.py`` 将 ``helloworld`` 模块标记为一种特殊的模块 - 可执行模块。如果你尝试使用 ``python -m helloworld`` 试图运行 ``helloworld`` 模块，Python 将从 ``__main__.py`` 文件开始执行。 ``__main__.py`` 的内容相对简单::"

#: ../../tutorial/tutorial-2.rst:29 c402124f80bd4044bd493def13f21ef6
msgid "That is - it imports the ``main`` method from the ``helloworld`` app; and if it's being executed as an entry point, calls the main() method, and starts the application's main loop. The main loop is the way a GUI application listens for user input (like mouse clicks and keyboard presses)."
msgstr "也就是说，它从 ``helloworld`` 应用程序中导入 ``main`` 方法；如果它作为入口点执行，则调用 main() 方法，并启动应用程序的主循环。主循环是 GUI 应用程序监听用户输入（如鼠标点击和键盘按下）的方式。"

#: ../../tutorial/tutorial-2.rst:34 1c091f6a78e84c589bbc05028ce5dcd6
msgid "The more interesting file is ``app.py`` - this contains the logic that creates our application window::"
msgstr "更有趣的文件是 ``app.py`` - 它包含创建我们应用程序窗口的逻辑::"

#: ../../tutorial/tutorial-2.rst:52 cabb8fe626cb4c44b81bf0a2d08f082a
msgid "Let's go through this line by line::"
msgstr "让我们逐行查看："

#: ../../tutorial/tutorial-2.rst:58 e0edf1a867fb4926b47f35639442bcbe
msgid "First, we import the ``toga`` widget toolkit, as well as some style-related utility classes and constants. Our code doesn't use these yet - but we'll make use of them shortly."
msgstr "首先，我们导入 ``toga`` 小部件工具包，以及一些与样式相关的实用类和常量。目前我们的代码还没有使用这些——但我们很快就会使用它们。"

#: ../../tutorial/tutorial-2.rst:62 b80cdd7496fc47c7950378440f578d0d
msgid "Then, we define a class::"
msgstr "然后，我们定义了一个类 ::"

#: ../../tutorial/tutorial-2.rst:66 8726b96a4fef4c69afe298475ec4cd0c
msgid "Each Toga application has a single ``toga.App`` instance, representing the running entity that is the application. The app may end up managing multiple windows; but for simple applications, there will be a single main window."
msgstr "每个 Toga 应用程序都有一个 ``toga.App`` 实例，代表应用程序的运行实体。应用程序最终可能会管理多个窗口；但是对于简单的应用程序来说，可能只有一个主窗口。"

#: ../../tutorial/tutorial-2.rst:70 139c2f77bb7a449fa68a373b788e0111
msgid "Next, we define a ``startup()`` method::"
msgstr "接下来，我们定义一个 ``startup()`` 方法 (startup意为启动)::"

#: ../../tutorial/tutorial-2.rst:75 fc6991f8ad064497a1fc0005da41d082
msgid "The first thing the startup method does is to define a main box. Toga's layout scheme behaves similar to HTML. You build an application by constructing a collection of boxes, each of which contains other boxes, or actual widgets. You then apply styles to these boxes to define how they will consume the available window space."
msgstr "startup 方法的第一件事是定义一个主盒子 (main box)。Toga 的布局方案类似于 HTML。你通过构造一系列盒子 (box) 来构建应用程序，每个盒子包含其他盒子或实际的小部件 (widgets)。然后，你对这些盒子应用样式 (styles)，以定义它们将如何消耗可用的窗口空间 (window space)。"

#: ../../tutorial/tutorial-2.rst:81 a002f31e8d9448c8bf05438d30fad11f
msgid "In this application, we define a single box, but we don't put anything into it."
msgstr "在这个应用程序中，我们定义了一个单独的空盒子 (我们没有放任何东西进去)。"

#: ../../tutorial/tutorial-2.rst:83 67d603b20cbd4bb29c161ffbf0397b83
msgid "Next, we define a window into which we can put this empty box::"
msgstr "接下来，我们定义一个可以将这个空盒子放入其中的窗口::"

#: ../../tutorial/tutorial-2.rst:87 9d366568d71c4fa587a4e1264a451526
msgid "This creates an instance of a ``toga.MainWindow``, which will have a title matching the application's name. A Main Window is a special kind of window in Toga - it's a window that is closely bound to the life cycle of the app. When the Main Window is closed, the application exits. The Main Window is also the window that has the application's menu (if you're on a platform like Windows where menu bars are part of the window)."
msgstr "这将创建一个 ``toga.MainWindow`` 的实例，它的标题 (title) 将与应用程序的名称 (self.formal_name) 匹配。主窗口是 Toga 中的一种特殊窗口——它与应用程序的生命周期 (life cycle) 密切绑定。主窗口关闭，应用程序就退出了。主窗口也具有应用程序菜单（例如类似 Windows 这样的平台上，菜单栏是窗口的一部分）。"

#: ../../tutorial/tutorial-2.rst:94 4ad20c5a81d34eb599883c8ed93010e1
msgid "Where is my window?"
msgstr "我的窗口怎么没有出现？"

#: ../../tutorial/tutorial-2.rst:96 21b1415d4de54c2b993aba58564bba75
msgid "If you have made an error in your code, the main window of the app may not display. If this happens, you can type **Ctrl+C** in the terminal where you started the app. This will stop the app. You can then fix the error and restart the app."
msgstr "如果你写的代码中有错误，app的主窗口可能不会显示。要是真这样了，你可以找到先前启动app的终端窗口，并在其中按下**Ctrl + C**，以终止app运行。之后，你就可以修改代码里的错误，再重启app。"

#: ../../tutorial/tutorial-2.rst:100 d1fe8c4e13764602beb2bc5b8f402ecb
msgid "We then add our empty box as the content of the main window, and instruct the application to show our window::"
msgstr "然后，我们将空盒子作为主窗口的内容，并指示应用程序显示我们的窗口::"

#: ../../tutorial/tutorial-2.rst:106 59ffbe34dfb5421db3a913da05198094
msgid "Last of all, we define a ``main()`` function. This is what creates the instance of our application::"
msgstr "最后，我们定义一个 ``main()`` 方法。它将创建应用程序的实例：："

#: ../../tutorial/tutorial-2.rst:112 09f565f6763b41bc90d066e889378a1f
msgid "This ``main()`` method is the one that is imported and invoked by ``__main__.py``. It creates and returns an instance of our ``HelloWorld`` application."
msgstr "这个 ``main()`` 方法由 ``__main__.py`` 导入并调用。它创建并返回我们的 ``HelloWorld`` 应用程序的实例。"

#: ../../tutorial/tutorial-2.rst:116 0d4438f6eeb6478e9c211279f2ba5d5d
msgid "That's the simplest possible Toga application. Let's put some of our own content into the application, and make the app do something interesting."
msgstr "这是最简单的可能的 Toga 应用程序。接下来让我们在应用程序中加入一些自己的内容，使应用程序做一些有趣的事情。"

#: ../../tutorial/tutorial-2.rst:120 fe5cd3bc3e884153a3b6cdf02dee9c09
msgid "Adding some content of our own"
msgstr "添加一些我们自己的内容"

#: ../../tutorial/tutorial-2.rst:122 53ee6da2c4d54c189716f2a14abde1a0
#, fuzzy
msgid "Let's do something more interesting with our ``HelloWorld`` app."
msgstr "对我们的 ``HelloWorld`` 应用程序，做些更有意思的事吧。"

#: ../../tutorial/tutorial-2.rst:126 44836f41e0e444c78b021d122d007960
msgid "When you make these changes, make sure you keep the imports at the top of the file, and the ``main()`` at the bottom of the file. You only need to update the ``HelloWorld`` class."
msgstr "在做这些更改时，确保不要删除文件顶部的导入 (imports)，也不要删除底部的 ``main()``。您只需更新 ``HelloWorld`` 类。"

#: ../../tutorial/tutorial-2.rst:130 d1ea3a99ddc54b00965f630f3299e4fe
msgid "Modify your ``HelloWorld`` class inside ``src/helloworld/app.py`` so that it looks like this::"
msgstr "修改 ``src/helloworld/app.py`` 中的 ``HelloWorld`` 类，使其看起来像这样：："

#: ../../tutorial/tutorial-2.rst:164 e4e8aabcc42a4f588a6fcc4f189f823c
msgid "Let's look in detail at what has changed."
msgstr "让我们详细看看有哪些变化。"

#: ../../tutorial/tutorial-2.rst:166 20c4df8349bc46e397fbd7421baa6aec
msgid "We're still creating a main box; however, we are now applying a style::"
msgstr "我们仍然在创建一个主盒子；然而，现在我们正在应用一个样式::"

#: ../../tutorial/tutorial-2.rst:170 349c39a670e14df7951de7696d34c543
msgid "Toga's built-in layout system is called \"Pack\". It behaves a lot like CSS. You define objects in a hierarchy - in HTML, the objects are ``<div>``, ``<span>``, and other DOM elements; in Toga, they're widgets and boxes. You can then assign styles to the individual elements. In this case, we're indicating that this is a ``COLUMN`` box - that is, it is a box that will consume all the available width, and will expand its height as content is added, but it will try to be as short as possible."
msgstr "Toga 的内置布局系统称为 \"Pack\" (包)。它的行为很像 CSS (Cascading Style Sheets 层叠样式表)。你可以在一个层次结构中定义对象--在 HTML 中，对象是 ``<div>`` (division 块级容器)、``<span>`` (inline span 内联容器) 和其他 DOM 元素 (Document Object Model 文档对象模型)；在 Toga 中，对象是部件 (widgets ) 和盒子 (boxes)。然后，您可以为各个元素指定样式。在本例中，我们表示这是一个 ``COLUMN`` (垂直) 框，也就是说，它是一个将占用所有可用宽度 (width) 的框，并会随着内容的添加而扩大高度 (height)，但会尽量使高度更短。"

#: ../../tutorial/tutorial-2.rst:177 99ed12a14f154fe08b41a8d1a2c99937
msgid "Next, we define a couple of widgets::"
msgstr "接下来，我们定义了一些小部件::"

#: ../../tutorial/tutorial-2.rst:185 e612789e08c94383ad88333cfb8ab546
msgid "Here, we define a Label and a TextInput. Both widgets have styles associated with them; the label will have 5px of padding on its left and right, and no padding on the top and bottom. The TextInput is marked as being flexible - that is, it will absorb all available space in its layout axis."
msgstr "在这里，我们定义了一个标签 (toga.Label) 和一个文本输入框 (toga.TextInput)。这两个小部件都有相关的样式；标签左右各有 5px 的填充，上下没有填充 (padding=(0, 5)。文本输入框被标记为灵活的 (flex=1)——也就是说，它将吸收其布局横向方向上所有可用的空间。"

#: ../../tutorial/tutorial-2.rst:190 2a3f1fadac9949daa27fa7569949bb33
msgid "The TextInput is assigned as an instance variable of the class. This gives us easy access to the widget instance - something that we'll use in a moment."
msgstr "文本输入框被分配为类的实例变量 (self.name_input)。这使我们能够轻松访问小部件 (widget) 实例 - 这是我们马上就会使用的东西。"

#: ../../tutorial/tutorial-2.rst:193 5d9b688f119c41eba0532daa020f5d9a
msgid "Next, we define a box to hold these two widgets::"
msgstr "接下来，我们定义了一个盒子来容纳这两个小部件::"

#: ../../tutorial/tutorial-2.rst:199 2cc569e358f849e4b819627ffb0540fb
msgid "The ``name_box`` is a box just like the main box; however, this time, it's a ``ROW`` box. That means content will be added horizontally, and it will try to make its width as narrow as possible. The box also has some padding - 5px on all sides."
msgstr "``name_box`` 就像主盒子一样；然而，这次它是一个 ``ROW`` (水平) 盒子。这意味着内容将水平添加，并且它会尽量使其宽度尽可能窄 (以确保屏幕横向方向能容纳下整个水平盒子)。盒子也有一些空白填充 (以提高可读性)——四周各为 5px。"

#: ../../tutorial/tutorial-2.rst:204 ef2145b7abfb4b3ebfea461ee52ccd5d
msgid "Now we define a button::"
msgstr "现在我们定义了一个按钮::"

#: ../../tutorial/tutorial-2.rst:212 9768899641a643f7977f4d5e87e6ade3
msgid "The button also has 5px of padding on all sides. We also define a *handler* - a method to invoke when the button is pressed."
msgstr "按钮的四周也有 5px 的填充。我们还定义了一个*处理程序* (handler)——当按钮被按下时要调用的方法 (on_press=self.say_hello)。"

#: ../../tutorial/tutorial-2.rst:215 f773fa78bdd44142afe3d2ccc3c8a713
msgid "Then, we add the name box and the button to the main box::"
msgstr "然后，我们将名称盒子和按钮添加到主盒子中::"

#: ../../tutorial/tutorial-2.rst:220 ff18f90da2934e7dbe95556703e4446a
msgid "This completes our layout; the rest of the startup method is as it was previously - defining a ``MainWindow``, and assigning the main box as the window's content::"
msgstr "这完成了我们的布局；其余的 startup 方法与以前一样 - 定义一个 ``MainWindow`` ，并将主盒子指定为窗口的内容::"

#: ../../tutorial/tutorial-2.rst:228 7b8a0afceb8745b3a42863d5a30f20d7
msgid "The last thing we need to do is define the handler for the button. A handler can be any method, generator, or asynchronous coroutine; it accepts the widget that generated the event as an argument, and will be invoked whenever the button is pressed::"
msgstr "我们需要做的最后一件事，就是定义按钮的处理器，它可以是任何方法、生成器或异步协程，且接受生成事件的小部件 (widget ) 作为参数。只要按下按钮，就会调用这些处理器::"

#: ../../tutorial/tutorial-2.rst:236 022a3ae765a04155ac71de2ecd2a3d79
msgid "The body of the method is a simple print statement - however, it will interrogate the current value of the name input, and use that content as the text that is printed."
msgstr "方法的主体是一个简单的打印语句——然而，它会使用名称输入的当前值 (self.name_input.value)，并使用该内容作为打印的文本。"

#: ../../tutorial/tutorial-2.rst:240 547edabadc824870944aedaa2d693ca4
msgid "Now that we've made these changes we can see what they look like by starting the application again. As before, we'll use developer mode:"
msgstr "现在我们已经做了这些更改，我们可以通过再次启动应用程序来看看它们的样子。和以前一样，我们将使用开发者模式："

#: ../../tutorial/tutorial-2.rst:245 ../../tutorial/tutorial-2.rst:282
#: 65bf37cb25174c6c88429cd18b0d50df cdf5cb4ce5e44022a8a3c683aeff314a
msgid "macOS"
msgstr "macOS"

#: ../../tutorial/tutorial-2.rst:254 ../../tutorial/tutorial-2.rst:288
#: 41aec146bc3d46eab2c30542cd320899 d60de3288af3485f8c0d56e10d748ab2
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-2.rst:263 ../../tutorial/tutorial-2.rst:294
#: 170c3d4843244475aee2a3a5ee03cd98 ba9802e42d7e4f4996ef0a8ea5f6b0e8
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-2.rst:272 b2eba356f51a406b8b31266cacec588a
msgid "You'll notice that this time, it *doesn't* install dependencies. Briefcase can detect that the application has been run before, and to save time, will only run the application. If you add new dependencies to your app, you can make sure that they're installed by passing in a ``-r`` option when you run ``briefcase dev``."
msgstr "你会注意到，这次它*没有*安装依赖项。Briefcase可以检测到应用程序已经运行过，为了节省时间，它只会运行应用程序。如果你在应用程序中添加了新的依赖项，你可以在运行 ``briefcase dev`` 时通过 ``-r`` 选项来确保它们被安装。"

#: ../../tutorial/tutorial-2.rst:278 6dc96170a4f940db8e43d6c6281068e1
msgid "This should open a GUI window:"
msgstr "这将打开一个图形用户界面 (GUI) 窗口："

#: ../../tutorial/tutorial-2.rst:284 f79ff490fd034da1837621dc52547233
msgid "Hello World Tutorial 2 window, on macOS"
msgstr "Hello World 教程 2 窗，在 MacOS 上"

#: ../../tutorial/tutorial-2.rst:290 c33d1159ff2743ab8acbf2076f40a990
msgid "Hello World Tutorial 2 window, on Linux"
msgstr "Hello World 教程 2 窗口，在 Linux 上"

#: ../../tutorial/tutorial-2.rst:296 a810ce956e1341de85c35f78bc930f6f
msgid "Hello World Tutorial 2 window, on Windows"
msgstr "Hello World 教程 2 窗口，在 Windows 上"

#: ../../tutorial/tutorial-2.rst:300 7ddb379caedf438485a9150d323eb825
msgid "If you enter a name in the text box, and press the GUI button, you should see output appear in the console where you started the application."
msgstr "如果在文本框中输入名称并按下 GUI 按钮，就会在启动程序的控制台中看到输出结果。"

#: ../../tutorial/tutorial-2.rst:304 216bfcbc43844c7da05c1951ab660e35
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-2.rst:306 899eead23fe645f5ba9e08d42fb32788
msgid "We've now got an application that does something a little more interesting. But it only runs on our own computer. Let's package this application for distribution. In :doc:`Tutorial 3 <tutorial-3>`, we'll wrap our application up as a standalone installer that we could send to a friend, a customer, or upload to an App Store."
msgstr "我们现在有了一个做一些更有趣的事情的应用程序。但它只能在我们自己的电脑上运行。让我们将这个应用程序打包以供分发。在 :doc:`Tutorial 3<tutorial-3>` 中，我们将把应用程序打包成一个独立的安装程序，我们可以发送给朋友、客户，或上传到应用商店。"

