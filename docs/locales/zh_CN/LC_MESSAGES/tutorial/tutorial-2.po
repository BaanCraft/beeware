
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-22 21:19+0000\n"
"PO-Revision-Date: 2024-01-14 01:02+0000\n"
"Last-Translator: Sheep Cat <xymsyh@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/beeware/tutorial/tutorial-2/zh_Hans/>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../tutorial/tutorial-2.rst:3 4e17afc37a9b42719642fe429f87cf0b
msgid "Tutorial 2 - Making it interesting"
msgstr "教程 2 - 使之更有趣"

#: ../../tutorial/tutorial-2.rst:5 65f3592981da4b819aea65809b7de159
msgid "In :doc:`Tutorial 1 <tutorial-1>`, we generated a stub project that was able to run, but we didn't write any code ourselves. Let's take a look at what was generated for us."
msgstr "在 :doc:`Tutorial 1<tutorial-1>` 中，我们生成了一个可以运行的基础项目，但我们自己并没有编写任何代码。让我们看看为我们生成了什么。"

#: ../../tutorial/tutorial-2.rst:10 05e7569c2b764463aab6f5077fda73bc
msgid "What was generated"
msgstr "生成的内容"

#: ../../tutorial/tutorial-2.rst:12 06f03c1f21ba42169644105f4293a8d7
msgid "In the ``src/helloworld`` directory, you should see 3 files: ``__init__.py``, ``__main__.py`` and ``app.py``."
msgstr "在 ``src/helloworld`` 目录中，你应该看到 3 个文件：__init__.py``、__main__.py`` 和 `app.py``。"

#: ../../tutorial/tutorial-2.rst:15 7cf6447b775c4457b4c856173e462142
msgid "``__init__.py`` marks the ``helloworld`` directory as an importable Python module. It is an empty file; the very fact it exists tells the Python interpreter that the ``helloworld`` directory defines a module."
msgstr "`__init__.py`` 将 ``helloworld`` 目录标记为可导入的 Python 模块。这是一个空文件；它的存在告诉 Python 解释器 helloworld 目录定义了一个模块。"

#: ../../tutorial/tutorial-2.rst:19 bd69a465f01e47a2abaaaae420d74b11
msgid "``__main__.py`` marks the ``helloworld`` module as a special kind of module - an executable module. If you try to run the ``helloworld`` module using ``python -m helloworld``, the ``__main__.py`` file is where Python will start executing. The contents of ``__main__.py`` is relatively simple::"
msgstr "``__main__.py`` 将 ``helloworld`` 模块标记为一种特殊的模块 - 可执行模块。如果你尝试使用 ``python -m helloworld`` 试图运行 ``helloworld`` 模块，Python 将从``__main__.py`` 文件开始执行。``__main__.py`` 的内容相对简单::"

#: ../../tutorial/tutorial-2.rst:29 add15846d86a444d90cc6c139bac4d85
msgid "That is - it imports the ``main`` method from the ``helloworld`` app; and if it's being executed as an entry point, calls the main() method, and starts the application's main loop. The main loop is the way a GUI application listens for user input (like mouse clicks and keyboard presses)."
msgstr "也就是说，它从 ``helloworld`` 应用程序中导入 ``main`` 方法；如果它作为入口点执行，则调用 main() 方法，并启动应用程序的主循环。主循环是 GUI 应用程序监听用户输入（如鼠标点击和键盘按下）的方式。"

#: ../../tutorial/tutorial-2.rst:34 3116f072061a4b379f207e4f9cf44dba
msgid "The more interesting file is ``app.py`` - this contains the logic that creates our application window::"
msgstr "更有趣的文件是 app.py - 它包含创建我们应用程序窗口的逻辑::"

#: ../../tutorial/tutorial-2.rst:52 9e5dada9e597480bbd8e38c857b5fb13
msgid "Let's go through this line by line::"
msgstr "让我们逐行查看："

#: ../../tutorial/tutorial-2.rst:58 3fee18ebcb0a468ea641fb8c6f9077ee
msgid "First, we import the ``toga`` widget toolkit, as well as some style-related utility classes and constants. Our code doesn't use these yet - but we'll make use of them shortly."
msgstr "首先，我们导入 ``toga`` 小部件工具包，以及一些与样式相关的实用类和常量。目前我们的代码还没有使用这些——但我们很快就会使用它们。"

#: ../../tutorial/tutorial-2.rst:62 00edc6b047464fd2922f5c36e5527224
msgid "Then, we define a class::"
msgstr "然后，我们定义了一个类::"

#: ../../tutorial/tutorial-2.rst:66 ccf3e721b33d49738c98c9570be0d08b
msgid "Each Toga application has a single ``toga.App`` instance, representing the running entity that is the application. The app may end up managing multiple windows; but for simple applications, there will be a single main window."
msgstr "每个 Toga 应用程序都有一个 ``toga.App`` 实例，代表应用程序的运行实体。应用程序最终可能会管理多个窗口；但是对于简单的应用程序来说，可能只有一个主窗口。"

#: ../../tutorial/tutorial-2.rst:70 df019fbd15c2405288a157b05b781810
msgid "Next, we define a ``startup()`` method::"
msgstr "接下来，我们定义一个 ``startup()`` 方法 (startup意为启动)::"

#: ../../tutorial/tutorial-2.rst:75 d417d88c560d43fbb011e0ce1e107bbe
msgid "The first thing the startup method does is to define a main box. Toga's layout scheme behaves similar to HTML. You build an application by constructing a collection of boxes, each of which contains other boxes, or actual widgets. You then apply styles to these boxes to define how they will consume the available window space."
msgstr "startup 方法的第一件事是定义一个主盒子 (main box)。Toga 的布局方案类似于 HTML。你通过构造一系列盒子 (box) 来构建应用程序，每个盒子包含其他盒子或实际的小部件 (widgets)。然后，你对这些盒子应用样式 (styles)，以定义它们将如何消耗可用的窗口空间 (window space)。"

#: ../../tutorial/tutorial-2.rst:81 ea309a1341434957aef912c244a5d70d
msgid "In this application, we define a single box, but we don't put anything into it."
msgstr "在这个应用程序中，我们定义了一个单独的空盒子 (我们没有放任何东西进去)。"

#: ../../tutorial/tutorial-2.rst:83 57087df00a6f45e4bb03542ba23206a4
msgid "Next, we define a window into which we can put this empty box::"
msgstr "接下来，我们定义一个窗口，并将这个空盒子放入其中::"

#: ../../tutorial/tutorial-2.rst:87 40881e7811d74e0ea38bbd84cbec12db
#, fuzzy
msgid "This creates an instance of a ``toga.MainWindow``, which will have a title matching the application's name. A Main Window is a special kind of window in Toga - it's a window that is closely bound to the life cycle of the app. When the Main Window is closed, the application exits. The Main Window is also the window that has the application's menu (if you're on a platform like Windows where menu bars are part of the window)."
msgstr "这将创建一个 toga.MainWindow 的实例，它的标题 (title) 将与应用程序的名称 (self.formal_name) 匹配。主窗口是 Toga 中的一种特殊窗口——它是与应用程序的生命周期 (life cycle) 密切绑定的窗口。当主窗口关闭时，应用程序退出。主窗口也是具有应用程序菜单的窗口（如果你在像 Windows 这样的平台上，菜单栏是窗口的一部分；如果你没有进行任何菜单栏的增删操作，你将看到默认的 file (文件) 和 help (帮助) 这两个菜单栏选项）"

#: ../../tutorial/tutorial-2.rst:94 780792e3090e4f7fa50a8288ab66c4c6
msgid "We then add our empty box as the content of the main window, and instruct the application to show our window::"
msgstr "然后，我们将空盒子作为主窗口的内容，并指示应用程序显示我们的窗口::"

#: ../../tutorial/tutorial-2.rst:100 981a850f9460474c98c799b7745b4135
#, fuzzy
msgid "Last of all, we define a ``main()`` function. This is what creates the instance of our application::"
msgstr "最后，我们定义一个 ``main()`` 方法。它将创建应用程序的实例：："

#: ../../tutorial/tutorial-2.rst:106 3cbc178fa5a84f04af51cffaa31c8bfd
msgid "This ``main()`` method is the one that is imported and invoked by ``__main__.py``. It creates and returns an instance of our ``HelloWorld`` application."
msgstr "这个 ``main()`` 方法由 ``__main__.py`` 导入并调用。它创建并返回我们的 ``HelloWorld`` 应用程序的实例。"

#: ../../tutorial/tutorial-2.rst:110 831cbb89650142909f2d521082bd1266
msgid "That's the simplest possible Toga application. Let's put some of our own content into the application, and make the app do something interesting."
msgstr "这是最简单的可能的 Toga 应用程序。接下来让我们在应用程序中加入一些自己的内容，使应用程序做一些有趣的事情。"

#: ../../tutorial/tutorial-2.rst:114 e249ae92004641a0b9ce8e53d8f30e92
msgid "Adding some content of our own"
msgstr "添加一些我们自己的内容"

#: ../../tutorial/tutorial-2.rst:116 f7ae057a986243e9bab0ae9598193bed
msgid "Lets do something more interesting with our ``HelloWorld`` app."
msgstr ""

#: ../../tutorial/tutorial-2.rst:120 78cab5c48afd4785b83bf69c497843b4
#, fuzzy
msgid "When you make these changes, make sure you keep the imports at the top of the file, and the ``main()`` at the bottom of the file. You only need to update the ``HelloWorld`` class."
msgstr "不要删除 app.py 文件顶部的导入 (import)，也不要删除底部的 ``main()``。您只需更新 ``HelloWorld`` 类。"

#: ../../tutorial/tutorial-2.rst:124 d9ab3b9f322a4886b22f63ce12945df2
msgid "Modify your ``HelloWorld`` class inside ``src/helloworld/app.py`` so that it looks like this::"
msgstr "修改 ``src/helloworld/app.py`` 中的 ``HelloWorld`` 类，使其看起来像这样：："

#: ../../tutorial/tutorial-2.rst:158 97f0ec97d7df4c6f8b919274cd067754
msgid "Let's look in detail at what has changed."
msgstr "让我们详细看看有哪些变化。"

#: ../../tutorial/tutorial-2.rst:160 79d628eeb3204c4fb2e37dcaae38c4b7
msgid "We're still creating a main box; however, we are now applying a style::"
msgstr "我们仍然在创建一个主盒子；然而，现在我们正在应用一个样式::"

#: ../../tutorial/tutorial-2.rst:164 4812830988384152a8f24737565b2061
#, fuzzy
msgid "Toga's built-in layout system is called \"Pack\". It behaves a lot like CSS. You define objects in a hierarchy - in HTML, the objects are ``<div>``, ``<span>``, and other DOM elements; in Toga, they're widgets and boxes. You can then assign styles to the individual elements. In this case, we're indicating that this is a ``COLUMN`` box - that is, it is a box that will consume all the available width, and will expand its height as content is added, but it will try to be as short as possible."
msgstr "Toga 的内置布局系统称为 \"Pack\" (包)。它的行为很像 CSS (Cascading Style Sheets 层叠样式表)。你可以在一个层次结构中定义对象--在 HTML 中，对象是 ``<div>`` (division 块级容器)、``<span>`` (inline span 内联容器) 和其他 DOM 元素 (Document Object Model 文档对象模型)；在 Toga 中，对象是部件 (widgets ) 和盒子 (boxes)。然后，您可以为各个元素指定样式。在本例中，我们表示这是一个 ``COLUMN`` (垂直) 框，也就是说，它是一个将占用所有可用宽度 (width) 的框，并会随着内容的添加而扩大高度 (height)，但会尽量使高度更短。"

#: ../../tutorial/tutorial-2.rst:171 69207263852745bbbb687c8207bcfa85
msgid "Next, we define a couple of widgets::"
msgstr "接下来，我们定义了一些小部件::"

#: ../../tutorial/tutorial-2.rst:179 99fb5a287f7a4569b9a6ff48e93e53ab
msgid "Here, we define a Label and a TextInput. Both widgets have styles associated with them; the label will have 5px of padding on its left and right, and no padding on the top and bottom. The TextInput is marked as being flexible - that is, it will absorb all available space in its layout axis."
msgstr "在这里，我们定义了一个标签 (toga.Label) 和一个文本输入框 (toga.TextInput)。这两个小部件都有相关的样式；标签左右各有 5px 的填充，上下没有填充 (padding=(0, 5)。文本输入框被标记为灵活的 (flex=1)——也就是说，它将吸收其布局横向方向上所有可用的空间。"

#: ../../tutorial/tutorial-2.rst:184 342c3d49d8a943e58105d0d0746425a0
msgid "The TextInput is assigned as an instance variable of the class. This gives us easy access to the widget instance - something that we'll use in a moment."
msgstr "文本输入框被分配为类的实例变量 (self.name_input)。这使我们能够轻松访问小部件 (widget) 实例 - 这是我们马上就会使用的东西。"

#: ../../tutorial/tutorial-2.rst:187 85cc7c4970c644ccb200ded652c6b82b
msgid "Next, we define a box to hold these two widgets::"
msgstr "接下来，我们定义了一个盒子来容纳这两个小部件::"

#: ../../tutorial/tutorial-2.rst:193 eb0ec6dcab334305bc2d3f24a8003a3e
msgid "The ``name_box`` is a box just like the main box; however, this time, it's a ``ROW`` box. That means content will be added horizontally, and it will try to make its width as narrow as possible. The box also has some padding - 5px on all sides."
msgstr "``name_box`` 就像主盒子一样；然而，这次它是一个 ``ROW`` (水平) 盒子。这意味着内容将水平添加，并且它会尽量使其宽度尽可能窄 (以确保屏幕横向方向能容纳下整个水平盒子)。盒子也有一些空白填充 (以提高可读性)——四周各为 5px。"

#: ../../tutorial/tutorial-2.rst:198 1b265cf8d78544ef80c4892dc42d4532
msgid "Now we define a button::"
msgstr "现在我们定义了一个按钮::"

#: ../../tutorial/tutorial-2.rst:206 9275dcf9d7894d71979e8629ecc0b927
msgid "The button also has 5px of padding on all sides. We also define a *handler* - a method to invoke when the button is pressed."
msgstr "按钮的四周也有 5px 的填充。我们还定义了一个*处理程序* (handler)——当按钮被按下时要调用的方法 (on_press=self.say_hello)。"

#: ../../tutorial/tutorial-2.rst:209 710ff91f3e1d40ceadda0a1418e4b70e
msgid "Then, we add the name box and the button to the main box::"
msgstr "然后，我们将名称盒子和按钮添加到主盒子中::"

#: ../../tutorial/tutorial-2.rst:214 66c4a7d1cfaf4434ac371eda62678dc9
#, fuzzy
msgid "This completes our layout; the rest of the startup method is as it was previously - defining a ``MainWindow``, and assigning the main box as the window's content::"
msgstr "这完成了我们的布局；其余的 startup 方法与以前一样 - 定义一个 MainWindow，并将主盒子指定为窗口的内容::"

#: ../../tutorial/tutorial-2.rst:222 cb2ab5fa3fbb454797ebee06c0d8006e
#, fuzzy
msgid "The last thing we need to do is define the handler for the button. A handler can be any method, generator, or asynchronous coroutine; it accepts the widget that generated the event as an argument, and will be invoked whenever the button is pressed::"
msgstr "我们需要做的最后一件事是定义按钮的处理器。处理器可以是任何方法、生成器或异步协程；它接受生成事件的小部件 (widget ) 作为参数，并且每当按下按钮时就会被调用::"

#: ../../tutorial/tutorial-2.rst:230 a535b487d6e94da8ba81676ccff1f2b2
msgid "The body of the method is a simple print statement - however, it will interrogate the current value of the name input, and use that content as the text that is printed."
msgstr "方法的主体是一个简单的打印语句——然而，它会使用名称输入的当前值 (self.name_input.value)，并使用该内容作为打印的文本。"

#: ../../tutorial/tutorial-2.rst:234 96417defabb84d1f99981927f74e160a
msgid "Now that we've made these changes we can see what they look like by starting the application again. As before, we'll use developer mode:"
msgstr "现在我们已经做了这些更改，我们可以通过再次启动应用程序来看看它们的样子。和以前一样，我们将使用开发者模式："

#: ../../tutorial/tutorial-2.rst:239 ../../tutorial/tutorial-2.rst:276
#: 3b9a2babf7484206b34b712d8f54ff98 7d5130f1503048a3b9e6b6f64168df30
msgid "macOS"
msgstr "MacOS"

#: ../../tutorial/tutorial-2.rst:248 ../../tutorial/tutorial-2.rst:282
#: 7d3ddb9b53e7484aaba797a42414e044 8cc8f90e086f41c7b1a18a2c81914c3f
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-2.rst:257 ../../tutorial/tutorial-2.rst:288
#: 3c2f049b774e4c019aee0b4056d48084 cbafe95db6f44d0e94f434b1d371e63c
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-2.rst:266 0921ff3788574653927fe203de564f42
msgid "You'll notice that this time, it *doesn't* install dependencies. Briefcase can detect that the application has been run before, and to save time, will only run the application. If you add new dependencies to your app, you can make sure that they're installed by passing in a ``-r`` option when you run ``briefcase dev``."
msgstr "你会注意到，这次它*没有*安装依赖项。Briefcase可以检测到应用程序已经运行过，为了节省时间，它只会运行应用程序。如果你在应用程序中添加了新的依赖项，你可以在运行 ``briefcase dev`` 时通过 ``-r`` 选项来确保它们被安装。"

#: ../../tutorial/tutorial-2.rst:272 c7a1ad85ad8347e3a8e84253381608d0
msgid "This should open a GUI window:"
msgstr "这将打开一个图形用户界面 (GUI) 窗口："

#: ../../tutorial/tutorial-2.rst:278 542217f461214f75ae2c92d0fe654570
msgid "Hello World Tutorial 2 window, on macOS"
msgstr "Hello World 教程 2 窗，在 MacOS 上"

#: ../../tutorial/tutorial-2.rst:284 0382111941934554a0fab77943826ba0
msgid "Hello World Tutorial 2 window, on Linux"
msgstr "Hello World 教程 2 窗口，在 Linux 上"

#: ../../tutorial/tutorial-2.rst:290 80620c022cda419b89f4f6c57feb9780
msgid "Hello World Tutorial 2 window, on Windows"
msgstr "Hello World 教程 2 窗口，在 Windows 上"

#: ../../tutorial/tutorial-2.rst:294 167dc500917d4359a191ad03e0d7b038
msgid "If you enter a name in the text box, and press the GUI button, you should see output appear in the console where you started the application."
msgstr "如果在文本框中输入名称并按下 GUI 按钮，就会在启动程序的控制台中看到输出结果。"

#: ../../tutorial/tutorial-2.rst:298 408747cff5c44d83ba18fb867b0fffd6
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-2.rst:300 473821ded1a446fb98fddfea28298356
msgid "We've now got an application that does something a little more interesting. But it only runs on our own computer. Let's package this application for distribution. In :doc:`Tutorial 3 <tutorial-3>`, we'll wrap our application up as a standalone installer that we could send to a friend, a customer, or upload to an App Store."
msgstr "我们现在有了一个做一些更有趣的事情的应用程序。但它只能在我们自己的电脑上运行。让我们将这个应用程序打包以供分发。在 :doc:`Tutorial 3<tutorial-3>` 中，我们将把应用程序打包成一个独立的安装程序，我们可以发送给朋友、客户，或上传到应用商店。"

