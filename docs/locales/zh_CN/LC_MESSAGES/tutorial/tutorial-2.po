msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-26 02:31+0000\n"
"PO-Revision-Date: 2025-03-28 13:01+0000\n"
"Last-Translator: TF <1903410612@qq.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/"
"projects/beeware/tutorial/tutorial-2/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.11-dev\n"
"Generated-By: Babel 2.16.0\n"

#: ../../tutorial/tutorial-2.rst:3 ca4261e59af84584a2231a79a22d7220
msgid "Tutorial 2 - Making it interesting"
msgstr "教程 2 - 使之更有趣"

#: ../../tutorial/tutorial-2.rst:5 80ac1f82dfb4448dbdec95f31dbdb4dc
msgid "In :doc:`Tutorial 1 <tutorial-1>`, we generated a stub project that was able to run, but we didn't write any code ourselves. Let's take a look at what was generated for us."
msgstr "在 :doc:`Tutorial 1<tutorial-1>` 中，我们生成了一个可以运行的基础项目，但我们自己并没有编写任何代码。让我们看看为我们生成了什么。"

#: ../../tutorial/tutorial-2.rst:10 347feaefbfb64f7f8d081395cdab983b
msgid "What was generated"
msgstr "生成的内容"

#: ../../tutorial/tutorial-2.rst:12 16c33a6974cd45cc82742e595617280e
msgid "In the ``src/helloworld`` directory, you should see 3 files: ``__init__.py``, ``__main__.py`` and ``app.py``."
msgstr "在 ``src/helloworld`` 目录中，你应该看到 3 个文件：__init__.py``、__main__.py`` 和 `app.py``。"

#: ../../tutorial/tutorial-2.rst:15 2cddcf5692234dc986c68120c61f4e45
msgid "``__init__.py`` marks the ``helloworld`` directory as an importable Python module. It is an empty file; the very fact it exists tells the Python interpreter that the ``helloworld`` directory defines a module."
msgstr "`__init__.py`` 将 ``helloworld`` 目录标记为可导入的 Python 模块。这是一个空文件；它的存在告诉 Python 解释器 helloworld 目录定义了一个模块。"

#: ../../tutorial/tutorial-2.rst:19 bbc9a21b3e36472190b22b16da212ade
msgid "``__main__.py`` marks the ``helloworld`` module as a special kind of module - an executable module. If you try to run the ``helloworld`` module using ``python -m helloworld``, the ``__main__.py`` file is where Python will start executing. The contents of ``__main__.py`` is relatively simple::"
msgstr "``__main__.py`` 将 ``helloworld`` 模块标记为一种特殊的模块 - 可执行模块。如果你尝试使用 ``python -m helloworld`` 试图运行 ``helloworld`` 模块，Python 将从``__main__.py`` 文件开始执行。``__main__.py`` 的内容相对简单::"

#: ../../tutorial/tutorial-2.rst:29 f4fcb9ec1030420a8623907fc13eb431
msgid "That is - it imports the ``main`` method from the ``helloworld`` app; and if it's being executed as an entry point, calls the main() method, and starts the application's main loop. The main loop is the way a GUI application listens for user input (like mouse clicks and keyboard presses)."
msgstr "也就是说，它从 ``helloworld`` 应用程序中导入 ``main`` 方法；如果它作为入口点执行，则调用 main() 方法，并启动应用程序的主循环。主循环是 GUI 应用程序监听用户输入（如鼠标点击和键盘按下）的方式。"

#: ../../tutorial/tutorial-2.rst:34 2bbb9f825e8741939346e378281e9a20
msgid "The more interesting file is ``app.py`` - this contains the logic that creates our application window::"
msgstr "更有趣的文件是 app.py - 它包含创建我们应用程序窗口的逻辑::"

#: ../../tutorial/tutorial-2.rst:52 4d0fbe13bbd548e388d91925fe37ebb9
msgid "Let's go through this line by line::"
msgstr "让我们逐行查看："

#: ../../tutorial/tutorial-2.rst:58 c7686fbb8366452abe3b26feadf25ca0
msgid "First, we import the ``toga`` widget toolkit, as well as some style-related utility classes and constants. Our code doesn't use these yet - but we'll make use of them shortly."
msgstr "首先，我们导入 ``toga`` 小部件工具包，以及一些与样式相关的实用类和常量。目前我们的代码还没有使用这些——但我们很快就会使用它们。"

#: ../../tutorial/tutorial-2.rst:62 eba2e081011b47829305169b8dc4aad8
msgid "Then, we define a class::"
msgstr "然后，我们定义了一个类::"

#: ../../tutorial/tutorial-2.rst:66 399352f187dd4a7787fa3635ea805ae0
msgid "Each Toga application has a single ``toga.App`` instance, representing the running entity that is the application. The app may end up managing multiple windows; but for simple applications, there will be a single main window."
msgstr "每个 Toga 应用程序都有一个 ``toga.App`` 实例，代表应用程序的运行实体。应用程序最终可能会管理多个窗口；但是对于简单的应用程序来说，可能只有一个主窗口。"

#: ../../tutorial/tutorial-2.rst:70 3ace4ec7460c4201962b1b57ef97970a
msgid "Next, we define a ``startup()`` method::"
msgstr "接下来，我们定义一个 ``startup()`` 方法 (startup意为启动)::"

#: ../../tutorial/tutorial-2.rst:75 f5c9cf08d71543b9a83e4f5a25254a4a
msgid "The first thing the startup method does is to define a main box. Toga's layout scheme behaves similar to HTML. You build an application by constructing a collection of boxes, each of which contains other boxes, or actual widgets. You then apply styles to these boxes to define how they will consume the available window space."
msgstr "startup 方法的第一件事是定义一个主盒子 (main box)。Toga 的布局方案类似于 HTML。你通过构造一系列盒子 (box) 来构建应用程序，每个盒子包含其他盒子或实际的小部件 (widgets)。然后，你对这些盒子应用样式 (styles)，以定义它们将如何消耗可用的窗口空间 (window space)。"

#: ../../tutorial/tutorial-2.rst:81 a3916149a9ae4865a139ac5229698612
msgid "In this application, we define a single box, but we don't put anything into it."
msgstr "在这个应用程序中，我们定义了一个单独的空盒子 (我们没有放任何东西进去)。"

#: ../../tutorial/tutorial-2.rst:83 1e7bd76a8a1f44b7bb512eaf7064f4e0
msgid "Next, we define a window into which we can put this empty box::"
msgstr "接下来，我们定义一个窗口，并将这个空盒子放入其中::"

#: ../../tutorial/tutorial-2.rst:87 c0c3db99dc824f9fb97c04a5ca7f970c
msgid "This creates an instance of a ``toga.MainWindow``, which will have a title matching the application's name. A Main Window is a special kind of window in Toga - it's a window that is closely bound to the life cycle of the app. When the Main Window is closed, the application exits. The Main Window is also the window that has the application's menu (if you're on a platform like Windows where menu bars are part of the window)."
msgstr ""
"这将创建一个 toga.MainWindow 的实例，它的标题 (title) 将与应用程序的名称 "
"(self.formal_name) 匹配。主窗口是 Toga 中的一种特殊窗口——"
"它与应用程序的生命周期 (life cycle) "
"密切绑定。主窗口关闭，应用程序就退出了。主窗口也具有应用程序菜单（例如类似 "
"Windows "
"这样的平台上，菜单栏是窗口的一部分；如果你没有进行任何菜单栏的增删操作，"
"你将看到默认的 file (文件) 和 help (帮助) 这两个菜单栏选项）"

#: ../../tutorial/tutorial-2.rst:94 63afc2b22c1d4390b2e65626dd437411
msgid "Where is my window?"
msgstr "应用程序窗口怎么没出现？"

#: ../../tutorial/tutorial-2.rst:96 ca11be974bbb4d95b15e2dceb4d8ffb9
msgid "If you have made an error in your code, the main window of the app may not display. If this happens, you can type **Ctrl+C** in the terminal where you started the app. This will stop the app. You can then fix the error and restart the app."
msgstr ""
"如果你写的代码中有错误，app的主窗口可能不会显示。要是真这样了，你可以找到先前"
"启动app的终端窗口，并在其中按下**Ctrl + "
"C**，以终止app运行。之后，你就可以修改代码里的错误，再重启app。"

#: ../../tutorial/tutorial-2.rst:100 7bb00431e0784353a19a3ca9bf4b7565
msgid "We then add our empty box as the content of the main window, and instruct the application to show our window::"
msgstr "然后，我们将空盒子作为主窗口的内容，并指示应用程序显示我们的窗口::"

#: ../../tutorial/tutorial-2.rst:106 c9b668b80d7a4d2082a85e3a2eddf27a
msgid "Last of all, we define a ``main()`` function. This is what creates the instance of our application::"
msgstr "最后，我们定义一个 ``main()`` 方法。它将创建应用程序的实例：："

#: ../../tutorial/tutorial-2.rst:112 93295f749e6d4ad294da954059ab074e
msgid "This ``main()`` method is the one that is imported and invoked by ``__main__.py``. It creates and returns an instance of our ``HelloWorld`` application."
msgstr "这个 ``main()`` 方法由 ``__main__.py`` 导入并调用。它创建并返回我们的 ``HelloWorld`` 应用程序的实例。"

#: ../../tutorial/tutorial-2.rst:116 25c02831eeac40ada7fd5daa9ea14edd
msgid "That's the simplest possible Toga application. Let's put some of our own content into the application, and make the app do something interesting."
msgstr "这是最简单的可能的 Toga 应用程序。接下来让我们在应用程序中加入一些自己的内容，使应用程序做一些有趣的事情。"

#: ../../tutorial/tutorial-2.rst:120 fa94af90f7344f96811e83486756e086
msgid "Adding some content of our own"
msgstr "添加一些我们自己的内容"

#: ../../tutorial/tutorial-2.rst:122 ff662ae79a0f494f91762af10382c936
msgid "Lets do something more interesting with our ``HelloWorld`` app."
msgstr "对我们的``HelloWorld``app，做些更有意思的事吧。"

#: ../../tutorial/tutorial-2.rst:126 bda8ff0a9e2a4b0e98c001f9a09ad3f8
#, fuzzy
msgid "When you make these changes, make sure you keep the imports at the top of the file, and the ``main()`` at the bottom of the file. You only need to update the ``HelloWorld`` class."
msgstr "不要删除 app.py 文件顶部的导入 (import)，也不要删除底部的 ``main()``。您只需更新 ``HelloWorld`` 类。"

#: ../../tutorial/tutorial-2.rst:130 efab8d0d4e3044b0a80ab86f9f7ff12d
msgid "Modify your ``HelloWorld`` class inside ``src/helloworld/app.py`` so that it looks like this::"
msgstr "修改 ``src/helloworld/app.py`` 中的 ``HelloWorld`` 类，使其看起来像这样：："

#: ../../tutorial/tutorial-2.rst:164 dfb275974c474e5d89959e69b8400b38
msgid "Let's look in detail at what has changed."
msgstr "让我们详细看看有哪些变化。"

#: ../../tutorial/tutorial-2.rst:166 bbbb614927ea492286a81c94f6e70dd4
msgid "We're still creating a main box; however, we are now applying a style::"
msgstr "我们仍然在创建一个主盒子；然而，现在我们正在应用一个样式::"

#: ../../tutorial/tutorial-2.rst:170 f9222365c0c941338f5e816753e0d456
msgid "Toga's built-in layout system is called \"Pack\". It behaves a lot like CSS. You define objects in a hierarchy - in HTML, the objects are ``<div>``, ``<span>``, and other DOM elements; in Toga, they're widgets and boxes. You can then assign styles to the individual elements. In this case, we're indicating that this is a ``COLUMN`` box - that is, it is a box that will consume all the available width, and will expand its height as content is added, but it will try to be as short as possible."
msgstr ""
"Toga 的内置布局系统称为 \"Pack\" (包)。它的行为很像 CSS (Cascading Style "
"Sheets 层叠样式表)。你可以在一个层次结构中定义对象--在 HTML 中，对象是 "
"``<div>`` (division 块级容器)、``<span>`` (inline span 内联容器) 和其他 DOM "
"元素 (Document Object Model 文档对象模型)；在 Toga 中，对象是部件 (widgets ) "
"和盒子 (boxes)。然后，您可以为各个元素指定样式。在本例中，我们表示这是一个 "
"``COLUMN`` (垂直) 框，也就是说，它是一个将占用所有可用宽度 (width) 的框，"
"并会随着内容的添加而扩大高度 (height)，但会尽量使高度更短。"

#: ../../tutorial/tutorial-2.rst:177 82b680cad48c4a3c87aad59303bbef99
msgid "Next, we define a couple of widgets::"
msgstr "接下来，我们定义了一些小部件::"

#: ../../tutorial/tutorial-2.rst:185 d16c35f2f88a40d5b3148e8411f87ce3
msgid "Here, we define a Label and a TextInput. Both widgets have styles associated with them; the label will have 5px of padding on its left and right, and no padding on the top and bottom. The TextInput is marked as being flexible - that is, it will absorb all available space in its layout axis."
msgstr "在这里，我们定义了一个标签 (toga.Label) 和一个文本输入框 (toga.TextInput)。这两个小部件都有相关的样式；标签左右各有 5px 的填充，上下没有填充 (padding=(0, 5)。文本输入框被标记为灵活的 (flex=1)——也就是说，它将吸收其布局横向方向上所有可用的空间。"

#: ../../tutorial/tutorial-2.rst:190 6ed16bd9e6cf42e18bdbed6d5aa8965c
msgid "The TextInput is assigned as an instance variable of the class. This gives us easy access to the widget instance - something that we'll use in a moment."
msgstr "文本输入框被分配为类的实例变量 (self.name_input)。这使我们能够轻松访问小部件 (widget) 实例 - 这是我们马上就会使用的东西。"

#: ../../tutorial/tutorial-2.rst:193 3b13adf7e1404a51a80bda0d13f43dd1
msgid "Next, we define a box to hold these two widgets::"
msgstr "接下来，我们定义了一个盒子来容纳这两个小部件::"

#: ../../tutorial/tutorial-2.rst:199 afe9e2578750481393026c9ece73d7f4
msgid "The ``name_box`` is a box just like the main box; however, this time, it's a ``ROW`` box. That means content will be added horizontally, and it will try to make its width as narrow as possible. The box also has some padding - 5px on all sides."
msgstr "``name_box`` 就像主盒子一样；然而，这次它是一个 ``ROW`` (水平) 盒子。这意味着内容将水平添加，并且它会尽量使其宽度尽可能窄 (以确保屏幕横向方向能容纳下整个水平盒子)。盒子也有一些空白填充 (以提高可读性)——四周各为 5px。"

#: ../../tutorial/tutorial-2.rst:204 51ab15e1603c47349339d34a45abff93
msgid "Now we define a button::"
msgstr "现在我们定义了一个按钮::"

#: ../../tutorial/tutorial-2.rst:212 5c833d5947474c369d9e478deb8e4f98
msgid "The button also has 5px of padding on all sides. We also define a *handler* - a method to invoke when the button is pressed."
msgstr "按钮的四周也有 5px 的填充。我们还定义了一个*处理程序* (handler)——当按钮被按下时要调用的方法 (on_press=self.say_hello)。"

#: ../../tutorial/tutorial-2.rst:215 a1ed427186884792bad12ab28f00f486
msgid "Then, we add the name box and the button to the main box::"
msgstr "然后，我们将名称盒子和按钮添加到主盒子中::"

#: ../../tutorial/tutorial-2.rst:220 1ea8308592674cfd893f3ebe2b3f073c
msgid "This completes our layout; the rest of the startup method is as it was previously - defining a ``MainWindow``, and assigning the main box as the window's content::"
msgstr "这完成了我们的布局；其余的 startup 方法与以前一样 - 定义一个 "
"MainWindow，并将主盒子指定为窗口的内容::"

#: ../../tutorial/tutorial-2.rst:228 32d6a1eac6d1469aab2122c839ff346e
msgid "The last thing we need to do is define the handler for the button. A handler can be any method, generator, or asynchronous coroutine; it accepts the widget that generated the event as an argument, and will be invoked whenever the button is pressed::"
msgstr ""
"我们需要做的最后一件事，就是定义按钮的处理器，它可以是任何方法、生成器或异步"
"协程，且接受生成事件的小部件 (widget ) "
"作为参数。只要按下按钮，就会调用这些处理器::"

#: ../../tutorial/tutorial-2.rst:236 4bdffa8419684140a994dc3a2a2c9555
msgid "The body of the method is a simple print statement - however, it will interrogate the current value of the name input, and use that content as the text that is printed."
msgstr "方法的主体是一个简单的打印语句——然而，它会使用名称输入的当前值 (self.name_input.value)，并使用该内容作为打印的文本。"

#: ../../tutorial/tutorial-2.rst:240 bf84ed26fa8d4bdab77e0fd996df8ae4
msgid "Now that we've made these changes we can see what they look like by starting the application again. As before, we'll use developer mode:"
msgstr "现在我们已经做了这些更改，我们可以通过再次启动应用程序来看看它们的样子。和以前一样，我们将使用开发者模式："

#: ../../tutorial/tutorial-2.rst:245 ../../tutorial/tutorial-2.rst:282
#: 04f5136594814270aea78d6387d8a8e8 11b87e4214654260a0b9708dc9f85f1d
msgid "macOS"
msgstr "MacOS"

#: ../../tutorial/tutorial-2.rst:254 ../../tutorial/tutorial-2.rst:288
#: 2beda043645d400cbab33ab4685d9268 a2c756d9aa7b41508acac99a839b5070
msgid "Linux"
msgstr "Linux"

#: ../../tutorial/tutorial-2.rst:263 ../../tutorial/tutorial-2.rst:294
#: ac209d97190c407db5bc899751285ffa d96fd95a7819405996eebbb4d7dfd792
msgid "Windows"
msgstr "Windows"

#: ../../tutorial/tutorial-2.rst:272 136e86287bf84715821b6066e6e3447c
msgid "You'll notice that this time, it *doesn't* install dependencies. Briefcase can detect that the application has been run before, and to save time, will only run the application. If you add new dependencies to your app, you can make sure that they're installed by passing in a ``-r`` option when you run ``briefcase dev``."
msgstr "你会注意到，这次它*没有*安装依赖项。Briefcase可以检测到应用程序已经运行过，为了节省时间，它只会运行应用程序。如果你在应用程序中添加了新的依赖项，你可以在运行 ``briefcase dev`` 时通过 ``-r`` 选项来确保它们被安装。"

#: ../../tutorial/tutorial-2.rst:278 5dd93f9cb2aa4a93b935add12574fa8f
msgid "This should open a GUI window:"
msgstr "这将打开一个图形用户界面 (GUI) 窗口："

#: ../../tutorial/tutorial-2.rst:284 7653572b02a9444e85a146304c8d40c6
msgid "Hello World Tutorial 2 window, on macOS"
msgstr "Hello World 教程 2 窗，在 MacOS 上"

#: ../../tutorial/tutorial-2.rst:290 70550c5a64184bd49b9130bb25ad529f
msgid "Hello World Tutorial 2 window, on Linux"
msgstr "Hello World 教程 2 窗口，在 Linux 上"

#: ../../tutorial/tutorial-2.rst:296 98a3d040786d42f1bbf8dbca27c890a7
msgid "Hello World Tutorial 2 window, on Windows"
msgstr "Hello World 教程 2 窗口，在 Windows 上"

#: ../../tutorial/tutorial-2.rst:300 f33e66f5bae54fa087591dac60b70abe
msgid "If you enter a name in the text box, and press the GUI button, you should see output appear in the console where you started the application."
msgstr "如果在文本框中输入名称并按下 GUI 按钮，就会在启动程序的控制台中看到输出结果。"

#: ../../tutorial/tutorial-2.rst:304 1ab1ba104d754bc1a04a6ccb26327ca0
msgid "Next steps"
msgstr "下一步"

#: ../../tutorial/tutorial-2.rst:306 44206036c53b4d5c8a77d77bf54fa89c
msgid "We've now got an application that does something a little more interesting. But it only runs on our own computer. Let's package this application for distribution. In :doc:`Tutorial 3 <tutorial-3>`, we'll wrap our application up as a standalone installer that we could send to a friend, a customer, or upload to an App Store."
msgstr "我们现在有了一个做一些更有趣的事情的应用程序。但它只能在我们自己的电脑上运行。让我们将这个应用程序打包以供分发。在 :doc:`Tutorial 3<tutorial-3>` 中，我们将把应用程序打包成一个独立的安装程序，我们可以发送给朋友、客户，或上传到应用商店。"
