# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-13 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: it\n"
"Language-Team: it <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../tutorial/tutorial-6.rst:3 c77e893e0530491a9eea63edbbcd97d1
msgid "Tutorial 6 - Put it on the web!"
msgstr ""

#: ../../tutorial/tutorial-6.rst:5 ba3b051ff3f8430b96e4400f32ae9214
msgid "In addition to supporting mobile platforms, the Toga widget toolkit also supports the web! Using the same API that you used to deploy your desktop and mobile applications, you can deploy your application as a single-page web app."
msgstr ""

#: ../../tutorial/tutorial-6.rst:9 a9e2e0b744a24ecbbcc3b27c1a3bfbee
msgid "Proof of Concept"
msgstr ""

#: ../../tutorial/tutorial-6.rst:11 cd58123453da41bda2a149916b923a2b
msgid "The Toga Web backend is the least mature of all the Toga backends. It's mature enough to show off a few features, but it's likely to be buggy, and will be missing many of the widgets that are available on other platforms. At this point in time, Web deployment should be considered a \"Proof of Concept\" - enough to demonstrate what can be done, but not enough to be relied on for serious development."
msgstr ""

#: ../../tutorial/tutorial-6.rst:18 d70c9166dbb4459b98880013d46ec9c4
msgid "If you have problems with this step of the tutorial, you can skip to the next page."
msgstr ""

#: ../../tutorial/tutorial-6.rst:22 50afe509bb6d437481fbdf176bf6b374
msgid "Deploying as a web app"
msgstr ""

#: ../../tutorial/tutorial-6.rst:24 fe22b389fcd24950959ce1f3cbd42268
msgid "The process of deploying as a single-page web app follows the same familiar pattern - you create the application, then build the application, then run it. However, Briefcase can be a little bit smart; if you attempt to run an application, and Briefcase determines that it hasn't been created or built for the platform being targeted, it will do the create and build steps for you. Since this is our first time running the app for the web, we can perform all three steps with one command:"
msgstr ""

#: ../../tutorial/tutorial-6.rst:34 08442cd504524177b2a8d6a0a33ef63e
msgid "macOS"
msgstr ""

#: ../../tutorial/tutorial-6.rst:72 940b0816d5ef42dc826edb06d68abf03
msgid "Linux"
msgstr ""

#: ../../tutorial/tutorial-6.rst:110 f3e6dd162ab74f44a184e14dfc2506f5
msgid "Windows"
msgstr ""

#: ../../tutorial/tutorial-6.rst:148 e62f6dea44a24de49600b7b2b9b6e3ca
msgid "This will open a web browser, pointing at `http://127.0.0.1:8080 <http://127.0.0.1:8080>`__:"
msgstr ""

#: ../../tutorial/tutorial-6.rst:-1 f5801eb897c7486d8cebe14cb60393ea
msgid "Hello World Tutorial 6 dialog, in a browser"
msgstr ""

#: ../../tutorial/tutorial-6.rst:154 ba244d1ce1af4838a08ca405e3a6a44e
msgid "If you enter your name and click the button, a dialog will appear."
msgstr ""

#: ../../tutorial/tutorial-6.rst:157 20a83da10a2c44e5a58f5a89852560e7
msgid "How does this work?"
msgstr ""

#: ../../tutorial/tutorial-6.rst:159 fe172eec14ff48e09bf660601f4eda7e
msgid "This web app is a static website - a single HTML source page, with some CSS and other resources. Briefcase has started a local web server to serve this page so your browser can view the page. If you wanted to put this web page into production, you could copy the contents of the ``www`` folder onto any web server that can serve static content."
msgstr ""

#: ../../tutorial/tutorial-6.rst:165 cd4d0b53fe834650860a16b3f85fd352
msgid "But when you press the button, you're running Python code... how does that work? Toga uses `PyScript <https://pyscript.net>`__ to provide a Python interpreter in the browser. Briefcase packages your app's code as wheels that PyScript can load in the browser. When the page is loaded, the application code runs in the browser, building the UI using the browser DOM. When you click a button, that button runs the event handling code in the browser."
msgstr ""

#: ../../tutorial/tutorial-6.rst:173 377320977bf14da0a7a0794a0e7353b4
msgid "Next steps"
msgstr ""

#: ../../tutorial/tutorial-6.rst:175 b07028ccc7aa474898a9ed21e4908c2e
msgid "Although we've now deployed this app on desktop, mobile and the web, the app is fairly simple, and doesn't involve any third-party libraries. Can we include libraries from the Python Package Index (PyPI) in our app? Turn to :doc:`Tutorial 7 <tutorial-7>` to find out..."
msgstr ""

