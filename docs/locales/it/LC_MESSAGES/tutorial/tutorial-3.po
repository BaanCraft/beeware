# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-13 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: it\n"
"Language-Team: it <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../tutorial/tutorial-3.rst:3 1ca0b9271cb64709b1ab87cf2387e69c
msgid "Tutorial 3 - Packaging for distribution"
msgstr ""

#: ../../tutorial/tutorial-3.rst:5 72d28f68f63c4133b1eeabcf425add2b
msgid "So far, we've been running our application in \"Developer mode\". This makes it easy for us to run our application locally - but what we really want is to be able to give our application to others."
msgstr ""

#: ../../tutorial/tutorial-3.rst:9 7b7490c24b6e4c0d89fe738d22288825
msgid "However, we don't want to have to teach our users how to install Python, create a virtual environment, clone a git repository, and run Briefcase in developer mode. We'd rather just give them an installer, and have the application Just Work."
msgstr ""

#: ../../tutorial/tutorial-3.rst:14 e55960b530b94d78926b4238d1edce47
msgid "Briefcase can be used to package your application for distribution in this way."
msgstr ""

#: ../../tutorial/tutorial-3.rst:17 9ed8768b1a284dd7958953f4bb3a5597
msgid "Creating your application scaffold"
msgstr ""

#: ../../tutorial/tutorial-3.rst:19 1adab79389e549f59c76466be4fe4a41
msgid "Since this is the first time we're packaging our application, we need to create some configuration files and other scaffolding to support the packaging process. From the ``helloworld`` directory, run:"
msgstr ""

#: ../../tutorial/tutorial-3.rst:25 ../../tutorial/tutorial-3.rst:174
#: ../../tutorial/tutorial-3.rst:257 ../../tutorial/tutorial-3.rst:351
#: 18bfc83b12dd438fa6f96efa957f4f09 bff62df4025a4483b2ad2c7f464a94f7
#: cfbeb7b703bf48a4ac6599d36a81f620 ea0c4a92e5e242f89e40eee098a45776
msgid "macOS"
msgstr ""

#: ../../tutorial/tutorial-3.rst:52 ../../tutorial/tutorial-3.rst:193
#: ../../tutorial/tutorial-3.rst:280 ../../tutorial/tutorial-3.rst:386
#: 00fc70631d0c439e8f78b8ecedf92ed3 311288da845442de80ef6d0740bf7875
#: a2310da16cf849b492eb54fa404fe33b fca1bae25f8042129bb2bed60ac3be16
msgid "Linux"
msgstr ""

#: ../../tutorial/tutorial-3.rst:86 ../../tutorial/tutorial-3.rst:228
#: ../../tutorial/tutorial-3.rst:307 ../../tutorial/tutorial-3.rst:497
#: 14201e116dd2427cae75ad285f7cdee6 1b435bad35274e30a48a2463039da8c6
#: 2d0b91dc64c249dbae171f670bea2931 f0d7711d51c14352a04ad21ca20b7e3f
msgid "Windows"
msgstr ""

#: ../../tutorial/tutorial-3.rst:110 cfb2c5c0bfd144b88c6a30554063964f
msgid "You've probably just seen pages of content go past in your terminal... so what just happened? Briefcase has done the following:"
msgstr ""

#: ../../tutorial/tutorial-3.rst:113 2367f7cfd6634d208a5d0672d8794645
msgid "It **generated an application template**. There's a lot of files and configurations required to build a native installer, above and beyond the code of your actual application. This extra scaffolding is almost the same for every application on the same platform, except for the name of the actual application being constructed - so Briefcase provides an application template for each platform it supports. This step rolls out the template, substituting the name of your application, bundle ID, and other properties of your configuration file as required to support the platform you're building on."
msgstr ""

#: ../../tutorial/tutorial-3.rst:123 af0449cc62c54baf9c3ac12044c0d3ee
msgid "If you're not happy with the template provided by Briefcase, you can provide your own. However, you probably don't want to do this until you've got a bit more experience using Briefcase's default template."
msgstr ""

#: ../../tutorial/tutorial-3.rst:127 f14e208199884872a16c3fc0963fb67b
msgid "It **downloaded and installed a support package**. The packaging approach taken by briefcase is best described as \"the simplest thing that could possibly work\" - it ships a complete, isolated Python interpreter as part of every application it builds. This is slightly space inefficient - if you have 5 applications packaged with Briefcase, you'll have 5 copies of the Python interpreter. However, this approach guarantees that every application is completely independent, using a specific version of Python that is known to work with the application."
msgstr ""

#: ../../tutorial/tutorial-3.rst:136 b0d86a630fe84eaa95ffea9f514d223f
msgid "Again, Briefcase provides a default support package for each platform; if you want, you can provide your own support package, and have that package included as part of the build process. You may want to do this if you have particular options in the Python interpreter that you need to have enabled, or if you want to strip modules out of the standard library that you don't need at runtime."
msgstr ""

#: ../../tutorial/tutorial-3.rst:143 f114e94efb5c43daa4ce3d4abbd0dd36
msgid "Briefcase maintains a local cache of support packages, so once you've downloaded a specific support package, that cached copy will be used on future builds."
msgstr ""

#: ../../tutorial/tutorial-3.rst:147 c2c2a32c9c5b493f9af479b10f118e10
msgid "It **installed application requirements**. Your application can specify any third-party modules that are required at runtime. These will be installed using ``pip`` into your application's installer."
msgstr ""

#: ../../tutorial/tutorial-3.rst:151 ee83d39e39fd4effaba1a8558af9674c
msgid "It **Installed your application code**. Your application will have its own code and resources (e.g., images that are needed at runtime); these files are copied into the installer."
msgstr ""

#: ../../tutorial/tutorial-3.rst:155 fbed4e7e277d490686d8c7675da9b36e
msgid "It **installed your resources needed by your application.** Lastly, it adds any additional resources that are needed by the installer itself. This includes things like icons that need to be attached to the final application and splash screen images."
msgstr ""

#: ../../tutorial/tutorial-3.rst:160 91ab22c3643a4977aa894c2328cd6fdf
msgid "Once this completes, if you look in the project directory, you should now see a directory corresponding to your platform (``macOS``, ``linux``, or ``windows``) that contains additional files. This is the platform-specific packaging configuration for your application."
msgstr ""

#: ../../tutorial/tutorial-3.rst:166 03c1e9a396774036a20eea9533953006
msgid "Building your application"
msgstr ""

#: ../../tutorial/tutorial-3.rst:168 06b57b824aa8447d9effeffe568caab0
msgid "You can now compile your application. This step performs any binary compilation that is necessary for your application to be executable on your target platform."
msgstr ""

#: ../../tutorial/tutorial-3.rst:187 9e69019d2e5e45a6b7e968003946dce6
msgid "On macOS, the ``build`` command doesn't need to *compile* anything, but it does need to sign the contents of binary so that it can be executed. This signature is an *ad hoc* signature - it will only work on *your* machine; if you want to distribute the application to others, you'll need to provide a full signature."
msgstr ""

#: ../../tutorial/tutorial-3.rst:222 0e2ff8c125bf4086a6cd3a2327dcebda
msgid "Once this step completes, the ``build`` folder will contain a ``helloworld-0.0.1`` folder that contains a mirror of a Linux ``/usr`` file system. This file system mirror will contain a ``bin`` folder with a ``helloworld`` binary, plus ``lib`` and ``share`` folders needed to support the binary."
msgstr ""

#: ../../tutorial/tutorial-3.rst:237 fa26a99a199842d58d8294e2c4f9a825
msgid "On Windows, the ``build`` command doesn't need to *compile* anything, but it does need to write some metadata so that the application knows its name, version, and so on."
msgstr ""

#: ../../tutorial/tutorial-3.rst:241 46df6c2a7ab34eeb8034473e8da19a1b
msgid "Triggering antivirus"
msgstr ""

#: ../../tutorial/tutorial-3.rst:243 0034195408b14fee90db5c4c3ee3ce74
msgid "Since this metadata is being written directly in to the pre-compiled binary rolled out from the template during the ``create`` command, this may trigger antivirus software running on your machine and prevent the metadata from being written. In that case, instruct the antivirus to allow the tool (named ``rcedit-x64.exe``) to run and re-run the command above."
msgstr ""

#: ../../tutorial/tutorial-3.rst:251 26a0de6482fc422c978478c27d8a8ccf
msgid "Running your app"
msgstr ""

#: ../../tutorial/tutorial-3.rst:253 f9f238f1ab58487795e9b34740cd1b79
msgid "You can now use Briefcase to run your application:"
msgstr ""

#: ../../tutorial/tutorial-3.rst:329 ad0af73d7d664bdfad0d11197051b235
msgid "This will start to run your native application, using the output of the ``build`` command."
msgstr ""

#: ../../tutorial/tutorial-3.rst:332 7e00cbcc6a384d14aa3796baf9b6b512
msgid "You might notice some small differences in the way your application looks when it's running. For example, icons and the name displayed by the operating system may be slightly different to those you saw when running under developer mode. This is also because you're using the packaged application, not just running Python code. From the operating system's perspective, you're now running \"an app\", not \"a Python program\", and this is reflected in how the application appears."
msgstr ""

#: ../../tutorial/tutorial-3.rst:341 f4f848207e3b4e2b9c01e72bea265110
msgid "Building your installer"
msgstr ""

#: ../../tutorial/tutorial-3.rst:343 bc62e71b92ff468d96390f5d4db92ad7
msgid "You can now package your application for distribution, using the ``package`` command. The package command does any compilation that is required to convert the scaffolded project into a final, distributable product. Depending on the platform, this may involve compiling an installer, performing code signing, or doing other pre-distribution tasks."
msgstr ""

#: ../../tutorial/tutorial-3.rst:367 e19e7184ca1748e0aaa48dff01cafbd0
msgid "The ``dist`` folder will contain a file named ``Hello World-0.0.1.dmg``. If you locate this file in the Finder, and double click on its icon, you'll mount the DMG, giving you a copy of the Hello World app, and a link to your Applications folder for easy installation. Drag the app file into Applications, and you've installed your application. Send the DMG file to a friend, and they should be able to do the same."
msgstr ""

#: ../../tutorial/tutorial-3.rst:374 f2a88ae500d34436bb5dbb1c2baf1bbe
msgid "In this example, we've used the ``--adhoc-sign`` option - that is, we're signing our application with *ad hoc* credentials - temporary credentials that will only work on your machine. We've done this to keep the tutorial simple. Setting up code signing identities is a little fiddly, and they're only *required* if you're intending to distribute your application to others. If we were publishing a real application for others to use, we would need to specify real credentials."
msgstr ""

#: ../../tutorial/tutorial-3.rst:382 5bce487b00ef4c17b0629b20a3efe865
msgid "When you're ready to publish a real application, check out the Briefcase How-To guide on `Setting up a macOS code signing identity <https://briefcase.readthedocs.io/en/latest/how-to/code-signing/macOS.html>`__"
msgstr ""

#: ../../tutorial/tutorial-3.rst:388 4d7b1f256bd84154987324d52f5eedc4
msgid "The output of the package step will be slightly different depending on your Linux distribution. If you're on a Debian-derived distribution, you'll see:"
msgstr ""

#: ../../tutorial/tutorial-3.rst:410 12d3331d8582468da5a3e369cbdad2b3
msgid "The ``dist`` folder will contain the ``.deb`` file that was generated."
msgstr ""

#: ../../tutorial/tutorial-3.rst:412 986f00813c8543da871f1397e04fda55
msgid "If you're on a RHEL-based distribution, you'll see:"
msgstr ""

#: ../../tutorial/tutorial-3.rst:440 c8fe5f3babc447fe8490e9eda20390d4
msgid "The ``dist`` folder will contain the ``.rpm`` file that was generated."
msgstr ""

#: ../../tutorial/tutorial-3.rst:442 a54167ad15a449cd99a9c1090c8dd051
msgid "If you're on an Arch-based distribution, you'll see:"
msgstr ""

#: ../../tutorial/tutorial-3.rst:460 07145177244d4077bb2a1330b424331f
msgid "The ``dist`` folder will contain the ``.pkg.tar.zst`` file that was generated."
msgstr ""

#: ../../tutorial/tutorial-3.rst:462 9a5488ea26ba49ce8e8619590e27aea9
msgid "Other Linux distributions aren't currently supported for packaging."
msgstr ""

#: ../../tutorial/tutorial-3.rst:464 5f1c8702cce343a5b4b58647d3efb526
msgid "If you want to build a package for a Linux distribution other than the one you're using, Briefcase can also help - but you'll need to install Docker."
msgstr ""

#: ../../tutorial/tutorial-3.rst:467 915a47f465db4e82964a3c9c491d7ef7
msgid "Official installers for `Docker Engine <https://docs.docker.com/engine/install>`__ are available for a range of Unix distributions. Follow the instructions for your platform; however, ensure you don't install Docker in \"rootless\" mode."
msgstr ""

#: ../../tutorial/tutorial-3.rst:472 3d594560cd6f475fb1d982c6ceb1edc0
msgid "Once you've installed Docker, you should be able to start an Linux container - for example:"
msgstr ""

#: ../../tutorial/tutorial-3.rst:479 840e8a287e234b498ba8bd69f5aaf304
msgid "will show you a Unix prompt (something like ``root@84444e31cff9:/#``) inside an Ubuntu 22.04 Docker container. Type Ctrl-D to exit Docker and return to your local shell."
msgstr ""

#: ../../tutorial/tutorial-3.rst:483 33f9ff527db947a0a4960f73c146b995
msgid "Once you've got Docker installed, you can use Briefcase to build a package for any Linux distribution that Briefcase supports by passing in a Docker image as an argument. For example, to build a DEB package for Ubuntu 22.04 (Jammy), regardless of the operating system you're on, you can run:"
msgstr ""

#: ../../tutorial/tutorial-3.rst:492 3e7c484e12544ad093f5eafc0cf57d60
msgid "This will download the Docker image for your selected operating system, create a container that is able to run Briefcase builds, and build the app package inside the image. Once it's completed, the ``dist`` folder will contain the package for the target Linux distribution."
msgstr ""

#: ../../tutorial/tutorial-3.rst:515 ced96e1a7eb7422fa5929c92029ec857
msgid "Once this step completes, the ``dist`` folder will contain a file named ``Hello_World-0.0.1.msi``. If you double click on this installer to run it, you should go through a familiar Windows installation process. Once this installation completes, there will be a \"Hello World\" entry in your start menu."
msgstr ""

#: ../../tutorial/tutorial-3.rst:522 7552f2bc86eb422b9844bba849780620
msgid "Next steps"
msgstr ""

#: ../../tutorial/tutorial-3.rst:524 4b727fa7a91a4bd992618c4aa14f4704
msgid "We now have our application packaged for distribution on desktop platforms. But what happens when we need to update the code in our application? How do we get those updates into our packaged application? Turn to :doc:`Tutorial 4 <./tutorial-4>` to find out..."
msgstr ""

