# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-13 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: it\n"
"Language-Team: it <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../tutorial/tutorial-4.rst:3 c116f6af9b3c415f9440f6e631c9ee0f
msgid "Tutorial 4 - Updating your application"
msgstr ""

#: ../../tutorial/tutorial-4.rst:5 17c83f83d24549a5918df71eb5448783
msgid "In the last tutorial, we packaged our application as a native application. If you're dealing with a real-world app, that isn't going to be the end of the story - you'll likely do some testing, discover problems, and need to make some changes. Even if your application is perfect, you'll eventually want to publish version 2 of your application with improvements."
msgstr ""

#: ../../tutorial/tutorial-4.rst:11 702fcd0916cf41608711ea8642a77bb1
msgid "So - how do you update your installed app when you make code changes?"
msgstr ""

#: ../../tutorial/tutorial-4.rst:14 aaa7e52c5c0b476ba44a52b95e7e313e
msgid "Updating application code"
msgstr ""

#: ../../tutorial/tutorial-4.rst:16 3bc827ba995e4f3b849acc39207ab932
msgid "Our application currently prints to the console when you press the button. However, GUI applications shouldn't really use the console for output. They need to use dialogs to communicate with users."
msgstr ""

#: ../../tutorial/tutorial-4.rst:20 263838025b7342b7826eb4b67adc5dac
msgid "Let's add a dialog box to say hello, instead of writing to the console. Modify the ``say_hello`` callback so it looks like this::"
msgstr ""

#: ../../tutorial/tutorial-4.rst:29 527c23f1dca748f69e38b3f354be60b8
msgid "This directs Toga to open a modal dialog box when the button is pressed."
msgstr ""

#: ../../tutorial/tutorial-4.rst:31 e1302287d6da493ea5d8cbf846dad4b8
msgid "If you run ``briefcase dev``, enter a name, and press the button, you'll see the new dialog box:"
msgstr ""

#: ../../tutorial/tutorial-4.rst:36 ../../tutorial/tutorial-4.rst:67
#: ../../tutorial/tutorial-4.rst:164 3561417f93804d55b4a24e2a7e8eddee
#: 47b581f400354b1eaf18971d6984fc75 84651a7f4f234bd1918ef0cc75ed1b72
msgid "macOS"
msgstr ""

#: ../../tutorial/tutorial-4.rst 395b5f2f956b494087a12119c783e886
msgid "Hello World Tutorial 4 dialog, on macOS"
msgstr ""

#: ../../tutorial/tutorial-4.rst:41 ../../tutorial/tutorial-4.rst:81
#: ../../tutorial/tutorial-4.rst:185 22df1313cc1248308009e0b0526821b9
#: 65cb2285e479480dae6148f2df58eb8e f4727739c21b43229b3f0be1284f9d8f
msgid "Linux"
msgstr ""

#: ../../tutorial/tutorial-4.rst a2c4fdc94b4743e4a523d47ab892d62b
msgid "Hello World Tutorial 4 dialog, on Linux"
msgstr ""

#: ../../tutorial/tutorial-4.rst:46 ../../tutorial/tutorial-4.rst:98
#: ../../tutorial/tutorial-4.rst:213 0e1acf700bf2417991d34f49d2e07ad0
#: 67e947f488c74c5a9c959f8cb9f832b5 91fe1f9627244f0ab9c13490c7465ccd
msgid "Windows"
msgstr ""

#: ../../tutorial/tutorial-4.rst cfb976e4f770469db8bfb1d88bb370e5
msgid "Hello World Tutorial 4 dialog, on Windows"
msgstr ""

#: ../../tutorial/tutorial-4.rst:51 d7237f3be2aa419cbcff18ba82556448
msgid "However, if you run ``briefcase run``, the dialog box won't appear."
msgstr ""

#: ../../tutorial/tutorial-4.rst:53 575e3205bdb34b39b86d893f85e1abe2
msgid "Why is this? Well, ``briefcase dev`` operates by running your code in place - it tries to produce as realistic runtime environment for your code as possible, but it doesn't provide or use any of the platform infrastructure for wrapping your code as an application. Part of the process of packaging your app involves copying your code *into* the application bundle - and at the moment, your application still has the old code in it."
msgstr ""

#: ../../tutorial/tutorial-4.rst:60 676575dea9294b239a044c90f003705f
msgid "So - we need to tell briefcase to update your app, copying in the new version of the code. We *could* do this by deleting the old platform directory and starting from scratch. However, Briefcase provides an easier way - you can update the code for your existing bundled application:"
msgstr ""

#: ../../tutorial/tutorial-4.rst:112 0ef7f8c50900485da75faf229790c249
msgid "If Briefcase can't find the scaffolded template, it will automatically invoke ``create`` to generate a fresh scaffold."
msgstr ""

#: ../../tutorial/tutorial-4.rst:115 05eb5cd59a7b4118812e657fce4bf825
msgid "Now that we've updated the installer code, we can then run ``briefcase build`` to re-compile the app, ``briefcase run`` to run the updated app, and ``briefcase package`` to repackage the application for distribution."
msgstr ""

#: ../../tutorial/tutorial-4.rst:119 1d2f8f2181e245fb82635ceaf043ad41
msgid "(macOS users, remember that as noted in :doc:`Tutorial 3 <tutorial-3>`, for the tutorial we recommend running ``briefcase package`` with the ``--adhoc-sign`` flag to avoid the complexity of setting up a code signing identity and keep the tutorial as simple as possible.)"
msgstr ""

#: ../../tutorial/tutorial-4.rst:125 c6e2c36181804da188607c49adb356be
msgid "Update and run in one step"
msgstr ""

#: ../../tutorial/tutorial-4.rst:127 1b3465ec5988450d99ddec6b36fbd71e
msgid "If you're rapidly iterating code changes, you'll likely want to make a code change, update the application, and immediately re-run your application. For most purposes, developer mode (``briefcase dev``) will be the easiest way to do this sort of rapid iteration; however, if you're testing something about how your application runs as a native binary, or hunting a bug that only manifests when your application is in packaged form, you may need to use repeated calls to ``briefcase run``. To simplify the process of updating and running the bundled app, Briefcase has a shortcut to support this usage pattern - the ``-u`` (or ``--update``) option on the ``run`` command."
msgstr ""

#: ../../tutorial/tutorial-4.rst:137 2c39b1966dd24d0cb59e292f79c1bb3e
msgid "Let's try making another change. You may have noticed that if you don't type a name in the text input box, the dialog will say \"Hello, \". Let's modify the ``say_hello`` function again to handle this edge case."
msgstr ""

#: ../../tutorial/tutorial-4.rst:141 f15d771f6c454962bb3cacb6a482bcf0
msgid "At the top of the file, between the imports and the ``class HelloWorld`` definition, add a utility methods to generate an appropriate greeting depending on the value of the name that has been provided::"
msgstr ""

#: ../../tutorial/tutorial-4.rst:151 8dfa2f9696cc48ceb0adde035c5fe0fd
msgid "Then, modify the ``say_hello`` callback to use this new utility method::"
msgstr ""

#: ../../tutorial/tutorial-4.rst:159 d3d432de95d94aada9266f77254087ff
msgid "Run your app in development mode (with ``briefcase dev``) to confirm that the new logic works; then update, build and run the app with one command:"
msgstr ""

#: ../../tutorial/tutorial-4.rst:229 9a3d373bd2be4cbeac3673cf3558ddbc
msgid "The package command also accepts the ``-u`` argument, so if you make a change to your application code and want to repackage immediately, you can run ``briefcase package -u``."
msgstr ""

#: ../../tutorial/tutorial-4.rst:234 7404688c5073487c929f65bb00599d68
msgid "Next steps"
msgstr ""

#: ../../tutorial/tutorial-4.rst:236 bfd65496267b4cc8a6238f708ca779a1
msgid "We now have our application packaged for distribution on desktop platforms, and we've been able to update the code in our application."
msgstr ""

#: ../../tutorial/tutorial-4.rst:239 63d4f71d4eab455ca1a069520836a59f
msgid "But what about mobile? In :doc:`Tutorial 5 <tutorial-5/index>`, we'll convert our application into a mobile application, and deploy it onto a device simulator, and onto a phone."
msgstr ""

