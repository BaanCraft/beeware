# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-24 17:48+0800\n"
"PO-Revision-Date: 2024-02-07 20:01+0000\n"
"Last-Translator: joaovitorpmoreira <programacaojoaopm@gmail.com>\n"
"Language-Team: Portuguese <https://hosted.weblate.org/projects/beeware/"
"tutorial/tutorial-8/pt/>\n"
"Language: pt\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 5.4-dev\n"
"Generated-By: Babel 2.14.0\n"

#: ../../tutorial/tutorial-8.rst:3 27be2bde76d443d88634819911e523df
msgid "Tutorial 8 - Making it Smooooth"
msgstr "Tutorial 8 - Suavizando o Processo"

#: ../../tutorial/tutorial-8.rst:5 19ee14cd0c244f7a851db8ab00eec89f
msgid "Unless you've got a *really* fast internet connection, you may notice that when you press the button, the GUI for your app locks up for a little bit. This is because the web request we have made is *synchronous*. When our application makes the web request, it waits for the API to return a response before continuing. While it's waiting, it *isn't* allowing the application to redraw - and as a result, the application locks up."
msgstr ""

#: ../../tutorial/tutorial-8.rst:13 bd29b5b9b5a440f3ba8735fedc89b336
msgid "GUI Event Loops"
msgstr ""

#: ../../tutorial/tutorial-8.rst:15 f2a19955a315440f95a41f95eec40751
msgid "To understand why this happens, we need to dig into the details of how a GUI application works. The specifics vary depending on the platform; but the high level concepts are the same, no matter the platform or GUI environment you're using."
msgstr ""

#: ../../tutorial/tutorial-8.rst:20 65f6e432f2e641d99c3e17055e17561d
msgid "A GUI app is, fundamentally, a single loop that looks something like::"
msgstr ""

#: ../../tutorial/tutorial-8.rst:26 4e902a58364542dd8ea00e9a5c2d7599
msgid "This loop is called the *Event Loop*. (These aren't actual method names - it's an illustration of what is going on in \"pseudo-code\")."
msgstr ""

#: ../../tutorial/tutorial-8.rst:29 97551b31ff0544369ed1a305603882af
msgid "When you click on a button, or drag a scroll bar, or type a key, you are generating an \"event\". That \"event\" is put onto a queue, and the app will process the queue of events when it next has the opportunity to do so. The user code that is triggered in response to the event is called an *event handler*. These event handlers are invoked as part of the ``process_events()`` call."
msgstr ""

#: ../../tutorial/tutorial-8.rst:35 758ee1cdb8084df8922cbe9b4db03cfd
msgid "Once an app has processed all the available events, it will ``redraw()`` the GUI. This takes into account any changes that the events have caused to the display of the app, as well as anything else that is going on in the operating system - for example, the windows of another app may obscure or reveal part of our app's window, and our app's redraw will need to reflect the portion of the window that is currently visible."
msgstr ""

#: ../../tutorial/tutorial-8.rst:42 127660836fab4717bf4e634ba24bbda1
msgid "The important detail to notice: while an application is processing an event, *it can't redraw*, and *it can't process other events*."
msgstr ""

#: ../../tutorial/tutorial-8.rst:45 f9a1f7b9c2ab4e6ead83cdb5a5f3ae4f
msgid "This means any user logic contained in an event handler needs to complete quickly. Any delay in completing the event handler will be observed by the user as a slowdown (or stop) in GUI updates. If this delay is long enough, your operating system may report this as a problem - the macOS \"beachball\" and Windows \"spinner\" icons are the operating system telling you that your app is taking too long in an event handler."
msgstr ""

#: ../../tutorial/tutorial-8.rst:52 bd660cecbd4a467d9f54d7d918f8bcaf
msgid "Simple operations like \"update a label\", or \"recompute the total of the inputs\" are easy to complete quickly. However, there are a lot of operations that can't be completed quickly. If you're performing a complex mathematical calculation, or indexing all the files on a file system, or performing a large network request, you can't \"just do it quickly\" - the operations are inherently slow."
msgstr ""

#: ../../tutorial/tutorial-8.rst:58 86e79e9c90854cbcadd7dda84c38b1b5
msgid "So - how do we perform long-lived operations in a GUI application?"
msgstr ""

#: ../../tutorial/tutorial-8.rst:61 3e9b95faee644246a3f40c60e3cca20b
msgid "Asynchronous programming"
msgstr ""

#: ../../tutorial/tutorial-8.rst:63 7b78cec2917c4470aac64abdd2351242
msgid "What we need is a way to tell an app in the middle of a long-lived event handler that it is OK to temporarily release control back to the event loop, as long as we can resume where we left off. It's up to the app to determine when this release can occur; but if the app releases control to the event loop regularly, we can have a long-running event handler *and* maintain a responsive UI."
msgstr ""

#: ../../tutorial/tutorial-8.rst:69 124a6c5bf6314245a666eed631016bd2
msgid "We can do this by using *asynchronous programming*. Asynchronous programming is a way to describe a program that allows the interpreter to run multiple functions at the same time, sharing resources between all the concurrently running functions."
msgstr ""

#: ../../tutorial/tutorial-8.rst:74 30595fb575254a2da6f1f028a3848285
msgid "Asynchronous functions (known as *co-routines*) need to be explicitly declared as being asynchronous. They also need to internally declare when an opportunity exists to change context to another co-routine."
msgstr ""

#: ../../tutorial/tutorial-8.rst:78 c080aab7329c4caeb32b1a042f125093
msgid "In Python, asynchronous programming is implemented using the ``async`` and ``await`` keywords, and the `asyncio <https://docs.python.org/3/library/asyncio.html>`__ module in the standard library. The ``async`` keyword allows us to declare that a function is an asynchronous co-routine. The ``await`` keyword provides a way to declare when an opportunity exists to change context to another co-routine. The `asyncio <https://docs.python.org/3/library/asyncio.html>`__ module provides some other useful tools and primitives for asynchronous coding."
msgstr ""

#: ../../tutorial/tutorial-8.rst:88 57cb0f2714ac4d62a0618986f81f0cb4
msgid "Making the tutorial Asynchronous"
msgstr ""

#: ../../tutorial/tutorial-8.rst:90 6556ac084dda480aa0c722101f8ae500
msgid "To make our tutorial asynchronous, modify the ``say_hello()`` event handler so it looks like this::"
msgstr ""

#: ../../tutorial/tutorial-8.rst:104 9a09c57c42f543f09b9b37ca236d26f5
msgid "There are only 4 changes in this code from the previous version:"
msgstr ""

#: ../../tutorial/tutorial-8.rst:106 c102f0fcf7694cd6beac753970f3e287
msgid "The method is defined as ``async def``, rather than just ``def``. This tells Python that the method is an asynchronous co-routine."
msgstr ""

#: ../../tutorial/tutorial-8.rst:109 179c1aed5ee742b18644868a55363488
msgid "The client that is created is an asynchronous ``AsyncClient()``, rather than a synchronous ``Client()``. This tells ``httpx`` that it should operate in asynchronous mode, rather than synchronous mode."
msgstr ""

#: ../../tutorial/tutorial-8.rst:113 58155d52eeda47dcb2af870dec948925
msgid "The context manager used to create the client is marked as ``async``. This tells Python that there is an opportunity to release control as the context manager is entered and exited."
msgstr ""

#: ../../tutorial/tutorial-8.rst:117 4884a52af61c4fd8a92f88c500cecc13
msgid "The ``get`` call is made with an ``await`` keyword. This instructs the app that while we are waiting for the response from the network, the app can release control to the event loop."
msgstr ""

#: ../../tutorial/tutorial-8.rst:121 502bff1841c147e29961e4cc95194143
msgid "Toga allows you to use regular methods or asynchronous co-routines as handlers; Toga manages everything behind the scenes to make sure the handler is invoked or awaited as required."
msgstr ""

#: ../../tutorial/tutorial-8.rst:125 d4be8b4f597c4d8e968ff4f4b8c5ffd1
msgid "If you save these changes and re-run the app (either with ``briefcase dev`` in development mode, or by updating and re-running the packaged app), there won't be any obvious changes to the app. However, when you click on the button to trigger the dialog, you may notice a number of subtle improvements:"
msgstr ""

#: ../../tutorial/tutorial-8.rst:130 2a40031096c045c5a9129b6d84056078
msgid "The button returns to an \"unclicked\" state, rather than being stuck in a \"clicked\" state."
msgstr ""

#: ../../tutorial/tutorial-8.rst:133 94b24da44c264565a918dde7b7db71ce
msgid "The \"beachball\"/\"spinner\" icon won't appear"
msgstr ""

#: ../../tutorial/tutorial-8.rst:135 5110408259ef461ebdc9f7185d3c1e71
msgid "If you move/resize the app window while waiting for the dialog to appear, the window will redraw."
msgstr ""

#: ../../tutorial/tutorial-8.rst:138 62ef37cf92c54299b348e097eabe34e5
msgid "If you try to open an app menu, the menu will appear immediately."
msgstr ""

#: ../../tutorial/tutorial-8.rst:141 166df7f1e1364ad19680d97c8c13cc2a
msgid "Next steps"
msgstr "Pr√≥ximos passos"

#: ../../tutorial/tutorial-8.rst:143 9640adf22e7d4e08b06a29e770effeae
msgid "We've now got an application that is slick and responsive, even when it's waiting on a slow API. But how can we make sure that the app keeps working as we continue to develop it further? How do we test our app? Turn to :doc:`Tutorial 9 <tutorial-9>` to find out..."
msgstr ""
